/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  LibEmblemVaultStorage,
  LibEmblemVaultStorageInterface,
} from "../../../src/libraries/LibEmblemVaultStorage";

const _abi = [
  {
    inputs: [],
    name: "AlreadyInitialized",
    type: "error",
  },
  {
    inputs: [],
    name: "AlreadyUnvaulted",
    type: "error",
  },
  {
    inputs: [],
    name: "CollectionOwnerNotSet",
    type: "error",
  },
  {
    inputs: [],
    name: "NonceAlreadyUsed",
    type: "error",
  },
  {
    inputs: [],
    name: "NotInitialized",
    type: "error",
  },
  {
    inputs: [],
    name: "NotWitness",
    type: "error",
  },
  {
    inputs: [],
    name: "ReentrantCall",
    type: "error",
  },
  {
    inputs: [],
    name: "UnvaultingDisabled",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroAddress",
    type: "error",
  },
] as const;

const _bytecode =
  "0x6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea26469706673582212201759217e7d56241774e95fc9ffb04a6e5ed682d2ade1826f30d0b3f5b618949a64736f6c634300081c0033";

type LibEmblemVaultStorageConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LibEmblemVaultStorageConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LibEmblemVaultStorage__factory extends ContractFactory {
  constructor(...args: LibEmblemVaultStorageConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      LibEmblemVaultStorage & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): LibEmblemVaultStorage__factory {
    return super.connect(runner) as LibEmblemVaultStorage__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LibEmblemVaultStorageInterface {
    return new Interface(_abi) as LibEmblemVaultStorageInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): LibEmblemVaultStorage {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as LibEmblemVaultStorage;
  }
}
