/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { PayableOverrides } from "../../common";
import type {
  EmblemVaultDiamond,
  EmblemVaultDiamondInterface,
} from "../../src/EmblemVaultDiamond";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_contractOwner",
        type: "address",
      },
      {
        internalType: "address",
        name: "_diamondCutFacet",
        type: "address",
      },
    ],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "AlreadyInitialized",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "selector",
        type: "bytes4",
      },
    ],
    name: "CannotReplaceSameFunction",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "initContract",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "initData",
        type: "bytes",
      },
    ],
    name: "DiamondInitFailed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "selector",
        type: "bytes4",
      },
    ],
    name: "FunctionAlreadyExists",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "selector",
        type: "bytes4",
      },
    ],
    name: "FunctionDoesNotExist",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "selector",
        type: "bytes4",
      },
    ],
    name: "FunctionNotFound",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "initContract",
        type: "address",
      },
    ],
    name: "InitializationContractEmpty",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "action",
        type: "uint8",
      },
    ],
    name: "InvalidFacetCutAction",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidInitialization",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroAddress",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "facetAddress",
            type: "address",
          },
          {
            internalType: "enum IDiamondCut.FacetCutAction",
            name: "action",
            type: "uint8",
          },
          {
            internalType: "bytes4[]",
            name: "functionSelectors",
            type: "bytes4[]",
          },
        ],
        indexed: false,
        internalType: "struct IDiamondCut.FacetCut[]",
        name: "_diamondCut",
        type: "tuple[]",
      },
      {
        indexed: false,
        internalType: "address",
        name: "_init",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "_calldata",
        type: "bytes",
      },
    ],
    name: "DiamondCut",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x6080604052610f7d6040813803918261001781610c8d565b938492833981010312610c3757610039602061003283610cb2565b9201610cb2565b905f5460ff8116610c295760ff19166001175f5561005682610cfb565b61005f81610cfb565b61006881610cfb565b5f516020610efd5f395f51905f5280546001600160a01b039283166001600160a01b0319821681179092559091167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a37fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131f6020527f699d9daa71b280d05a152715774afa0a81a312594b2d731d6b0b2552b7d6f69f8054600160ff1991821681179092557ff97e938d8af42f52387bb74b8b526fda8f184cc2aa534340a8d75a88fbecc77580548216831790557f65d510a5d8f7ef134ec444f7f34ee808c8eeb5177cdfd16be0c40fe1ab43369580548216831790556307f5828d60e41b5f527f5622121b47b8cd0120c4efe45dd5483242f54a3d49bd7679be565d47694918c3805490911690911790556040906101a182610c8d565b6001815290601f1983015f5b818110610c0457506101be84610c8d565b90600182523660208301376307e4c70760e21b6101da82610cc6565b526101e3610c3b565b6001600160a01b0390921682525f60208301528382015261020382610cc6565b5261020d81610cc6565b5060209061021a82610c8d565b5f815292601f19830136848601375f925b8251841015610ab4578061023f8585610ce7565b5101516003811015610aa057806104e157506001600160a01b036102638585610ce7565b51511692826102728683610ce7565b5101519061027f85610cfb565b5f516020610f1d5f395f51905f52549663ffffffff8816975f905f5b8181106104a3575b505015610495575b5f5b8351811015610411576001600160e01b03196102c98286610ce7565b51165f8181525f516020610f3d5f395f51905f528752879020546001600160a01b03166103ff57906103f960019289886103b463ffffffff8f8d908261032b8760018060a01b03165f525f516020610f5d5f395f51905f5260205260405f2090565b541691610336610c6e565b9687529083168587019081528187019283525f606088018181528982525f516020610f3d5f395f51905f5290975291909120955186549151925163ffffffff60c01b90851660c01b1692841660a090811b8c821b8d900392831692199093169190911793901b19929092169190911763ffffffff60c01b1916178355565b5181546001600160e01b031960e092831b169187901b879003161790556001600160a01b038a165f9081525f516020610f5d5f395f51905f5260205260409020610e1a565b016102ad565b6333c9344360e21b5f5260045260245ffd5b5091515f516020610efd5f395f51905f525493975091959394509260a083901c6001600160601b03928316019290918311610481576001600160a01b031660a09290921b6001600160a01b031916919091175f516020610efd5f395f51905f52556001905b01929391909161022b565b634e487b7160e01b5f52601160045260245ffd5b61049e86610da8565b6102ab565b886104ad82610d78565b905460039190911b1c6001600160a01b0316146104cc5760010161029b565b9950505063ffffffff60019816975f806102a3565b90949291906001810361086357506001600160a01b036105018584610ce7565b51511691816105108683610ce7565b5101519061051d84610cfb565b5f516020610f1d5f395f51905f52549463ffffffff8616955f905f5b818110610825575b505015610817575b5f5b8351811015610807576001600160e01b03196105678286610ce7565b511690815f525f516020610f3d5f395f51905f528a52855f20610588610c6e565b9054908860018060a01b0383168083528d63ffffffff8560a01c16908401528983019363ffffffff8160c01c16855260e01c6060840152146107f45780516001600160a01b0316156107e157516001600160a01b03165f9081525f516020610f5d5f395f51905f5260205260409020928354915f198301928311610481576001948d828561073f9663ffffffff61062996511603610745575b505050610d3b565b805f525f516020610f3d5f395f51905f528c525f88812055888c6106fa63ffffffff8d816106738660018060a01b03165f525f516020610f5d5f395f51905f5260205260405f2090565b54169061067e610c6e565b95865282168486019081528d86019182525f606087018181528882525f516020610f3d5f395f51905f529096528e9020955186549151925163ffffffff60c01b90851660c01b1692841660a090811b8c821b8d900392831692199093169190911793901b19929092169190911763ffffffff60c01b1916178355565b5181546001600160e01b031960e092831b169187901b879003161790556001600160a01b0389165f9081525f516020610f5d5f395f51905f5260205260409020610e1a565b0161054b565b6107d99263ffffffff6107665f516020610f3d5f395f51905f529387610d1a565b90549060031b1c60e01b9361079f85610782848451168a610d1a565b90919063ffffffff83549160031b9260e01c831b921b1916179055565b516001600160e01b03199094165f90815292909152908d9020805463ffffffff60c01b19169190921660c01b63ffffffff60c01b16179055565b8d5f80610621565b8363f8473e6b60e01b5f5260045260245ffd5b83636baa917160e11b5f5260045260245ffd5b5095915092506001919350610476565b61082085610da8565b610549565b8761082f82610d78565b905460039190911b1c6001600160a01b03161461084e57600101610539565b9750505063ffffffff60019616955f80610541565b909492919060028103610a8a57506001600160a01b036108838583610ce7565b51511691856108928684610ce7565b51015192610a76575f5b8351811015610a0e576001600160e01b03196108b88286610ce7565b511690815f525f516020610f3d5f395f51905f528652875f20916108da610c6e565b92549260018060a01b0384169081815263ffffffff8560a01c168982015260608b82019563ffffffff8160c01c16875260e01c91015280156109fb576001600160a01b03165f9081525f516020610f5d5f395f51905f526020526040902080545f198101949190851161048157848260019663ffffffff61096495511603610981575b5050610d3b565b5f525f516020610f3d5f395f51905f5286525f888120550161089c565b63ffffffff6109936109f49385610d1a565b90549060031b1c60e01b916109af836107828484511688610d1a565b516001600160e01b03199092165f9081525f516020610f3d5f395f51905f528d528e9020805463ffffffff60c01b19169190921660c01b63ffffffff60c01b16179055565b5f8061095d565b5063f8473e6b60e01b5f5260045260245ffd5b5091515f516020610efd5f395f51905f525493959294929391926001600160601b0391821660a084901c039290918311610481576001600160a01b031660a09290921b6001600160a01b031916919091175f516020610efd5f395f51905f5255600190610476565b6332191c2960e01b5f52600260045260245ffd5b60ff906332191c2960e01b5f521660045260245ffd5b634e487b7160e01b5f52602160045260245ffd5b8285918351916060830160608452815180915260808401908360808260051b8701019301915f905b828210610b6e57505050505f828401528281038584015283518082525f5b818110610b5b57509281845f857f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb67397859796010152601f801991011601030190a151610b4c575160b89081610e458239f35b63f92ee8a960e01b5f5260045ffd5b8581018401518382018501528301610afa565b868503607f19018152835180516001600160a01b0316865286810151949593949293919260608301916003821015610aa05760808460608e8c979481979689809701520151958201528451809452019201905f905b808210610be0575050509080600192960192019201909291610adc565b82516001600160e01b03191684528994938401939092019160019190910190610bc3565b602090610c0f610c3b565b5f81525f83820152606087820152828287010152016101ad565b62dc149f60e41b5f5260045ffd5b5f80fd5b60405190606082016001600160401b03811183821017610c5a57604052565b634e487b7160e01b5f52604160045260245ffd5b60405190608082016001600160401b03811183821017610c5a57604052565b6040519190601f01601f191682016001600160401b03811183821017610c5a57604052565b51906001600160a01b0382168203610c3757565b805115610cd35760200190565b634e487b7160e01b5f52603260045260245ffd5b8051821015610cd35760209160051b010190565b6001600160a01b031615610d0b57565b63d92e233d60e01b5f5260045ffd5b9190918054831015610cd3575f52601c60205f208360031c019260021b1690565b80548015610d64575f190190610d518282610d1a565b63ffffffff82549160031b1b1916905555565b634e487b7160e01b5f52603160045260245ffd5b5f516020610f1d5f395f51905f5254811015610cd3575f516020610f1d5f395f51905f525f5260205f2001905f90565b5f516020610f1d5f395f51905f525468010000000000000000811015610c5a57600181015f516020610f1d5f395f51905f52555f516020610f1d5f395f51905f528054821015610cd3575f908152602090200180546001600160a01b0319166001600160a01b03909216919091179055565b9081549168010000000000000000831015610c5a5782610782916001610e4295018155610d1a565b56fe608060405236156080575f80356001600160e01b0319168082527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131d6020526040909120546001600160a01b0316908115606e575f8083368280378136915af43d5f803e15606a573d5ff35b3d5ffd5b630a82dd7360e31b5f5260045260245ffd5b00fea2646970667358221220450303dcbacc3290d05ee89154694de60c82d3725f0cef15da6ddce13c07ab4164736f6c634300081c0033c8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131cc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131ec8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131dc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320";

type EmblemVaultDiamondConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: EmblemVaultDiamondConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class EmblemVaultDiamond__factory extends ContractFactory {
  constructor(...args: EmblemVaultDiamondConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _contractOwner: AddressLike,
    _diamondCutFacet: AddressLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _contractOwner,
      _diamondCutFacet,
      overrides || {}
    );
  }
  override deploy(
    _contractOwner: AddressLike,
    _diamondCutFacet: AddressLike,
    overrides?: PayableOverrides & { from?: string }
  ) {
    return super.deploy(
      _contractOwner,
      _diamondCutFacet,
      overrides || {}
    ) as Promise<
      EmblemVaultDiamond & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): EmblemVaultDiamond__factory {
    return super.connect(runner) as EmblemVaultDiamond__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EmblemVaultDiamondInterface {
    return new Interface(_abi) as EmblemVaultDiamondInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): EmblemVaultDiamond {
    return new Contract(address, _abi, runner) as unknown as EmblemVaultDiamond;
  }
}
