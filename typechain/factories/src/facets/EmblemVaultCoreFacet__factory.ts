/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  EmblemVaultCoreFacet,
  EmblemVaultCoreFacetInterface,
} from "../../../src/facets/EmblemVaultCoreFacet";

const _abi = [
  {
    inputs: [],
    name: "FactoryNotSet",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "collection",
        type: "address",
      },
    ],
    name: "InvalidCollection",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidInitialization",
    type: "error",
  },
  {
    inputs: [],
    name: "NoWitnessesRemaining",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "Unauthorized",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "collection",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "VaultAlreadyLocked",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "collection",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "VaultNotLocked",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "witness",
        type: "address",
      },
    ],
    name: "WitnessAlreadyExists",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "witness",
        type: "address",
      },
    ],
    name: "WitnessDoesNotExist",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroAddress",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "who",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bytes4",
        name: "functionSig",
        type: "bytes4",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "BypassRuleAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "who",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bytes4",
        name: "functionSig",
        type: "bytes4",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "BypassRuleRemoved",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bool",
        name: "newState",
        type: "bool",
      },
    ],
    name: "BypassabilityToggled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "oldUri",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "newUri",
        type: "string",
      },
    ],
    name: "MetadataBaseUriChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "oldRecipient",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newRecipient",
        type: "address",
      },
    ],
    name: "RecipientAddressChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "oldFactory",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newFactory",
        type: "address",
      },
    ],
    name: "VaultFactorySet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "nftAddress",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "VaultLocked",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "nftAddress",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "VaultUnlocked",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "witness",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "newCount",
        type: "uint256",
      },
    ],
    name: "WitnessAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "witness",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "newCount",
        type: "uint256",
      },
    ],
    name: "WitnessRemoved",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "who",
        type: "address",
      },
      {
        internalType: "bytes4",
        name: "functionSig",
        type: "bytes4",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "addBypassRule",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_witness",
        type: "address",
      },
    ],
    name: "addWitness",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getCoreVersion",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getMetadataBaseUri",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRecipientAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getVaultFactory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getWitnessCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "collection",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "isVaultLocked",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_witness",
        type: "address",
      },
    ],
    name: "isWitness",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "collection",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "lockVault",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "who",
        type: "address",
      },
      {
        internalType: "bytes4",
        name: "functionSig",
        type: "bytes4",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "removeBypassRule",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_witness",
        type: "address",
      },
    ],
    name: "removeWitness",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_uri",
        type: "string",
      },
    ],
    name: "setMetadataBaseUri",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_recipient",
        type: "address",
      },
    ],
    name: "setRecipientAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_factory",
        type: "address",
      },
    ],
    name: "setVaultFactory",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "toggleBypassability",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "collection",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "unlockVault",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608080604052346015576110d4908161001a8239f35b5f80fdfe6080806040526004361015610012575f80fd5b5f3560e01c90816318bcb28414610d16575080631986166f14610c0b57806329dfb6d814610bc45780632adbc37d14610b1d5780632cf1dacb14610a095780633564dab1146109d65780633697a6791461074757806336bfc264146106925780633ea7fbdb146105f357806351f8472d1461050057806359e26be1146104075780637ce87b43146103c057806390ebc2951461038f578063b152612114610263578063d3c6a6d61461023a578063ee2f13cd1461010c5763fa7643f4146100d7575f80fd5b3461010857602036600319011261010857602060ff6100fc6100f7610d45565b610f4e565b54166040519015158152f35b5f80fd5b3461010857602036600319011261010857610125610d45565b61012d610f86565b61013681610fcc565b60ff61014182610f4e565b54161561021a5760015f51602061105f5f395f51905f5254111561020b5760ff61016a82610f4e565b54166101ba575b5f51602061105f5f395f51905f52546040519081526001600160a01b03909116907f1ff88bc3e69c6903589b562dc0b9742562dc22d911cc01f4197889a4fe2b6ef390602090a2005b6101c381610f4e565b805460ff191690555f51602061105f5f395f51905f525480156101f7575f19015f51602061105f5f395f51905f5255610171565b634e487b7160e01b5f52601160045260245ffd5b630af6ac9360e21b5f5260045ffd5b6319c2ceef60e31b5f9081526001600160a01b0391909116600452602490fd5b34610108575f3660031901126101085760205f51602061105f5f395f51905f5254604051908152f35b346101085760403660031901126101085761027c610d45565b602435610287610f86565b5f51602061107f5f395f51905f52546001600160a01b0316916102a983610fdc565b604051635fa15ebb60e01b81526001600160a01b0382166004820181905293602090829060249082905afa8015610384576102ec915f91610355575b5082610ffb565b6102f68282611024565b1561033e5761030490610f16565b815f5260205260405f2060ff19815416905533917f2b658fa80808efcb87eae74ad63e68ebf7c2f1d3c6b72559216de6bf139df82c5f80a4005b50906362f4a4df60e11b5f5260045260245260445ffd5b610377915060203d60201161037d575b61036f8183610dd5565b810190610efe565b856102e5565b503d610365565b6040513d5f823e3d90fd5b346101085760403660031901126101085760206103b66103ad610d45565b60243590611024565b6040519015158152f35b34610108575f366003190112610108577feae6a9186ef8c9a9c621be57187141839c5405aaab5291e1ca9745c5e148d418546040516001600160a01b039091168152602090f35b3461010857602036600319011261010857610420610d45565b610428610f86565b61043181610fcc565b60ff61043c82610f4e565b54166104e05760ff61044d82610f4e565b54161561049e575b5f51602061105f5f395f51905f52546040519081526001600160a01b03909116907f03cbbb96049647a1b9c82cb52e189108225c9505338aa7c27fde7922f9a2814790602090a2005b6104a781610f4e565b805460ff191660011790555f51602061105f5f395f51905f52545f1981146101f7576001015f51602061105f5f395f51905f5255610455565b634b5f36cd60e11b5f9081526001600160a01b0391909116600452602490fd5b3461010857604036600319011261010857610519610d45565b602435610524610f86565b5f51602061107f5f395f51905f52546001600160a01b03169161054683610fdc565b604051635fa15ebb60e01b81526001600160a01b0382166004820181905293602090829060249082905afa801561038457610588915f91610355575082610ffb565b6105928282611024565b6105dc5761059f90610f16565b815f5260205260405f20600160ff1982541617905533917f61bc7746751948bc635d62b52fb56afb9c62baa3d7c88a073bb6f5117dfcc7f45f80a4005b509063f951587960e01b5f5260045260245260445ffd5b346101085760203660031901126101085761060c610d45565b610614610f86565b61061d81610fcc565b5f51602061107f5f395f51905f52546001600160a01b0391821691168115610683575f51602061107f5f395f51905f5280546001600160a01b031916831790557f1b943fe75300ea9e47c5a635375efa67d6f47e0a6525090b9147a23e8f349ad15f80a3005b63d92e233d60e01b5f5260045ffd5b34610108576020366003190112610108576106ab610d45565b6106b3610f86565b6106bc81610fcc565b7feae6a9186ef8c9a9c621be57187141839c5405aaab5291e1ca9745c5e148d418546001600160a01b0391821691168115610683577feae6a9186ef8c9a9c621be57187141839c5405aaab5291e1ca9745c5e148d41880546001600160a01b031916831790557e3127e9b6a11612441daf54bfc1b4821908e7a969fdd378a8a4912538ad358b5f80a3005b346101085760203660031901126101085760043567ffffffffffffffff8111610108573660238201121561010857806004013567ffffffffffffffff81116101085760248201916024823692010111610108576107a2610f86565b6107aa610e2f565b91601f19601f83011691602083016107c56040519182610dd5565b818152818360208301375f6020838301015280519067ffffffffffffffff82116109c2576108005f51602061103f5f395f51905f5254610df7565b601f8111610953575b50602090601f83116001146108aa5760207fa74c344bfde9303dae489ee59ab2aae993c2f1bca142c1d350dcd91495034d2b97948461088598958398955f95869261089f575b50508160011b9185199060031b1c1916175f51602061103f5f395f51905f52555b80604051988997604089526040890190610d96565b9487860384890152818652838601378301015201030190a1005b015190508b8061084f565b90601f198316915f51602061103f5f395f51905f525f52815f20925f5b81811061093b575094600185602098955f958a956108859c997fa74c344bfde9303dae489ee59ab2aae993c2f1bca142c1d350dcd91495034d2b9e9b10610923575b505050811b015f51602061103f5f395f51905f5255610870565b0151861960f88460031b161c191690558b8080610909565b929360206001819287860151815501950193016108c7565b5f51602061103f5f395f51905f525f527f0127c1d48e0f8c5b9ef3381d76413764dc5fee45d0830f6ba0ce0f09a4bb169c601f840160051c810191602085106109b8575b601f0160051c01905b8181106109ad5750610809565b5f81556001016109a0565b9091508190610997565b634e487b7160e01b5f52604160045260245ffd5b34610108575f36600319011261010857610a056109f1610e2f565b604051918291602083526020830190610d96565b0390f35b3461010857610a1736610d5b565b9190610a21610f86565b610a2a82610fcc565b6001600160e01b031916908115610b0e576001600160a01b038116908115610683576001600160a01b0381165f9081527feae6a9186ef8c9a9c621be57187141839c5405aaab5291e1ca9745c5e148d41f60205260409020835f5260205260405f2060ff19815416905583610ac1575b507f54f3f0d0ba9b20e45d0d7c9ebd52d86acce464fb5ee3e4ce4426007c371676965f80a4005b6001600160a01b03165f9081527feae6a9186ef8c9a9c621be57187141839c5405aaab5291e1ca9745c5e148d42060205260409020835f5260205260405f2060ff19815416905583610a9a565b63f92ee8a960e01b5f5260045ffd5b34610108575f36600319011261010857610b35610f86565b7fb5556865e1434712316e738aa987753a9b45845c3e3aea24c635de798885446d60207feae6a9186ef8c9a9c621be57187141839c5405aaab5291e1ca9745c5e148d4135461ff0060ff8260081c161560081b169061ff00191617807feae6a9186ef8c9a9c621be57187141839c5405aaab5291e1ca9745c5e148d4135560ff6040519160081c1615158152a1005b34610108575f36600319011261010857610a05604051610be5604082610dd5565b60058152640302e312e360dc1b6020820152604051918291602083526020830190610d96565b3461010857610c1936610d5b565b9190610c23610f86565b610c2c82610fcc565b6001600160e01b031916908115610b0e576001600160a01b038116908115610683576001600160a01b0381165f9081527feae6a9186ef8c9a9c621be57187141839c5405aaab5291e1ca9745c5e148d41f60205260409020835f5260205260405f20600160ff1982541617905583610cc6575b507f0549011144f39038e4fb04653e51530cc508b355e1f5ffc9cd9dba3936e0cb755f80a4005b6001600160a01b03165f9081527feae6a9186ef8c9a9c621be57187141839c5405aaab5291e1ca9745c5e148d42060205260409020835f5260205260405f20600160ff1982541617905583610c9f565b34610108575f366003190112610108575f51602061107f5f395f51905f52546001600160a01b03168152602090f35b600435906001600160a01b038216820361010857565b6060906003190112610108576004356001600160a01b038116810361010857906024356001600160e01b031981168103610108579060443590565b91908251928382525f5b848110610dc0575050825f602080949584010152601f8019910116010190565b80602080928401015182828601015201610da0565b90601f8019910116810190811067ffffffffffffffff8211176109c257604052565b90600182811c92168015610e25575b6020831014610e1157565b634e487b7160e01b5f52602260045260245ffd5b91607f1691610e06565b604051905f825f51602061103f5f395f51905f525491610e4e83610df7565b8083529260018116908115610edf5750600114610e74575b610e7292500383610dd5565b565b505f51602061103f5f395f51905f525f90815290917f0127c1d48e0f8c5b9ef3381d76413764dc5fee45d0830f6ba0ce0f09a4bb169c5b818310610ec3575050906020610e7292820101610e66565b6020919350806001915483858901015201910190918492610eab565b60209250610e7294915060ff191682840152151560051b820101610e66565b90816020910312610108575180151581036101085790565b6001600160a01b03165f9081527feae6a9186ef8c9a9c621be57187141839c5405aaab5291e1ca9745c5e148d4146020526040902090565b6001600160a01b03165f9081527feae6a9186ef8c9a9c621be57187141839c5405aaab5291e1ca9745c5e148d4156020526040902090565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c546001600160a01b03163303610fb957565b63472511eb60e11b5f523360045260245ffd5b6001600160a01b03161561068357565b6001600160a01b031615610fec57565b6329f7dfeb60e21b5f5260045ffd5b90156110045750565b63bf29a5e560e01b5f9081526001600160a01b0391909116600452602490fd5b61102d90610f16565b905f5260205260ff60405f2054169056feeae6a9186ef8c9a9c621be57187141839c5405aaab5291e1ca9745c5e148d417eae6a9186ef8c9a9c621be57187141839c5405aaab5291e1ca9745c5e148d421eae6a9186ef8c9a9c621be57187141839c5405aaab5291e1ca9745c5e148d419a264697066735822122068bbb768f82a2b9581d5f85577a29fd15f4312d2be7d7e575c4578d7408fd96464736f6c634300081c0033";

type EmblemVaultCoreFacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: EmblemVaultCoreFacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class EmblemVaultCoreFacet__factory extends ContractFactory {
  constructor(...args: EmblemVaultCoreFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      EmblemVaultCoreFacet & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): EmblemVaultCoreFacet__factory {
    return super.connect(runner) as EmblemVaultCoreFacet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EmblemVaultCoreFacetInterface {
    return new Interface(_abi) as EmblemVaultCoreFacetInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): EmblemVaultCoreFacet {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as EmblemVaultCoreFacet;
  }
}
