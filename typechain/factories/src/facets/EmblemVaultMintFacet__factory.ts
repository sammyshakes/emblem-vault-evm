/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  EmblemVaultMintFacet,
  EmblemVaultMintFacetInterface,
} from "../../../src/facets/EmblemVaultMintFacet";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "size",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "limit",
        type: "uint256",
      },
    ],
    name: "BatchSizeExceeded",
    type: "error",
  },
  {
    inputs: [],
    name: "ETHTransferFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "FactoryNotSet",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "provided",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "expected",
        type: "uint256",
      },
    ],
    name: "IncorrectPayment",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "collection",
        type: "address",
      },
    ],
    name: "InvalidCollection",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidRecipient",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidSerialNumbersCount",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidSignature",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "length1",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "length2",
        type: "uint256",
      },
    ],
    name: "LengthMismatch",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "collection",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "MintFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "NonceAlreadyUsed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "NotWitness",
    type: "error",
  },
  {
    inputs: [],
    name: "ReentrantCall",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "SafeERC20FailedOperation",
    type: "error",
  },
  {
    inputs: [],
    name: "StaleSignature",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "nftAddress",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "paymentToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "serialNumbers",
        type: "uint256[]",
      },
    ],
    name: "TokenMinted",
    type: "event",
  },
  {
    inputs: [],
    name: "MAX_BATCH_SIZE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "nftAddresses",
            type: "address[]",
          },
          {
            internalType: "address",
            name: "payment",
            type: "address",
          },
          {
            internalType: "uint256[]",
            name: "prices",
            type: "uint256[]",
          },
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "uint256[]",
            name: "tokenIds",
            type: "uint256[]",
          },
          {
            internalType: "uint256[]",
            name: "nonces",
            type: "uint256[]",
          },
          {
            internalType: "bytes[]",
            name: "signatures",
            type: "bytes[]",
          },
          {
            internalType: "uint256[][]",
            name: "serialNumbers",
            type: "uint256[][]",
          },
          {
            internalType: "uint256[]",
            name: "amounts",
            type: "uint256[]",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct EmblemVaultMintFacet.BatchBuyParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "batchBuyWithSignedPrice",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_nftAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "_payment",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_price",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_nonce",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_signature",
        type: "bytes",
      },
      {
        internalType: "uint256[]",
        name: "_serialNumbers",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_timestamp",
        type: "uint256",
      },
    ],
    name: "buyWithSignedPrice",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getMintVersion",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60808060405234601557611d6a908161001a8239f35b5f80fdfe60806040526004361015610011575f80fd5b5f3560e01c80636f4e74a6146100545780638dc619901461004f578063cfdbf2541461004a5763de3ba07414610045575f80fd5b610798565b61075c565b6106be565b602036600319011261064a5760043567ffffffffffffffff811161064a5780600401610140600319833603011261064a5761008d610c8b565b60648201906100a561009e836107f5565b3390610cc9565b60848301926100be6100b78584610802565b9050610cec565b6100df6100cb8584610802565b90506100d78480610802565b919050610d0e565b6100e98483610802565b9190506100fe60448201926100d78486610802565b6101088584610802565b92905061011d60a48301936100d78587610802565b6101278685610802565b91905061013c60c48401926100d78488610802565b6101468786610802565b905061015b6101048501916100d78389610802565b6101658887610802565b905061017960e48601916100d7838a610802565b7feae6a9186ef8c9a9c621be57187141839c5405aaab5291e1ca9745c5e148d419545f928392916101b2906001600160a01b0316610d2e565b60248701966101240135935f5b6101c98d8c610802565b9050811015610514576102736101f16101ec836101e68f80610802565b9061084c565b6107f5565b60208d6102476101ec866101e66102406102346102347feae6a9186ef8c9a9c621be57187141839c5405aaab5291e1ca9745c5e148d4195460018060a01b031690565b6001600160a01b031690565b9480610802565b604051635fa15ebb60e01b81526001600160a01b03909116600482015293849190829081906024820190565b03915afa91821561050f57836101e68f61029f6102aa966102a5966101ec965f926104df575b50610d4d565b80610802565b610d76565b806104b1575b6104a2578888888f8f988f908f89908d948c938a6102ce8588610802565b6102d8929161084c565b356102e29161090b565b9a8a6102ee8988610802565b6102f8929161084c565b356103029161090b565b9d8a61030e8488610802565b610318929161084c565b3561032290610dd0565b8a8080808080806103338d80610802565b61033d929161084c565b610346906107f5565b9f610350906107f5565b9d61035b908d610802565b610365929161084c565b3595610370906107f5565b9661037b908c610802565b610385929161084c565b3596610391908b610802565b61039b929161084c565b35966103a7908a610802565b6103b1929161084c565b35966103bd9089610802565b6103c792916108dc565b97909a6103d391610802565b6103dd929161091d565b99909636906103eb92610977565b95469936906103f9926109df565b976104039a610e12565b6001600160a01b0381165f9081527feae6a9186ef8c9a9c621be57187141839c5405aaab5291e1ca9745c5e148d415602052604090205460ff1661044691610f7c565b806104518b8d610802565b61045b929161084c565b35610497905f527feae6a9186ef8c9a9c621be57187141839c5405aaab5291e1ca9745c5e148d41660205260405f20600160ff19825416179055565b6001019390936101bf565b63237bde5160e21b5f5260045ffd5b508a6104d7826101e6866104cf836104c98b88610802565b906108dc565b959050610802565b3514156102b0565b61050191925060203d8111610508575b6104f98183610897565b8101906108b9565b905f610299565b503d6104ef565b6108d1565b508b928a918c91908a6001600160a01b0361052e826107f5565b166105fd57505f80808361054382953461103c565b5f516020611cf55f395f51905f52546001600160a01b03165af1610565610a15565b50156105ee576105e4946105d961059f6105d16105af966105c96105df995b6105c16105b76105a66105978680610802565b98909c6107f5565b9986610802565b9c909386610802565b9a9095610802565b9a90963691610a44565b993691610977565b953691610977565b943691610a9a565b9361120b565b610b16565b6105ec611728565b005b63b12d13eb60e01b5f5260045ffd5b61059f6105d16105af966105c96105df996106456105e49c976106256102346105d9996107f5565b5f516020611cf55f395f51905f52546001600160a01b0316903390610fa5565b610584565b5f80fd5b6001600160a01b0381160361064a57565b9181601f8401121561064a5782359167ffffffffffffffff831161064a576020838186019501011161064a57565b9181601f8401121561064a5782359167ffffffffffffffff831161064a576020808501948460051b01011161064a57565b61014036600319011261064a576004356106d78161064e565b602435906106e48261064e565b604435916064356106f48161064e565b6084359360a43560c43567ffffffffffffffff811161064a5761071b90369060040161065f565b9160e4359767ffffffffffffffff891161064a576107406105ec99369060040161068d565b9690956101043598610124359a610b56565b5f91031261064a57565b3461064a575f36600319011261064a576020604051602d8152f35b5f5b8381106107885750505f910152565b8181015183820152602001610779565b3461064a575f36600319011261064a576107e7604080516107b98282610897565b6005815260208101640302e312e360dc1b815282519384926020845251809281602086015285850190610777565b601f01601f19168101030190f35b356107ff8161064e565b90565b903590601e198136030182121561064a570180359067ffffffffffffffff821161064a57602001918160051b3603831361064a57565b634e487b7160e01b5f52603260045260245ffd5b919081101561085c5760051b0190565b610838565b634e487b7160e01b5f52604160045260245ffd5b610140810190811067ffffffffffffffff82111761089257604052565b610861565b90601f8019910116810190811067ffffffffffffffff82111761089257604052565b9081602091031261064a5751801515810361064a5790565b6040513d5f823e3d90fd5b9082101561085c576108f39160051b810190610802565b9091565b634e487b7160e01b5f52601160045260245ffd5b9190820180921161091857565b6108f7565b919081101561085c5760051b81013590601e198136030182121561064a57019081359167ffffffffffffffff831161064a57602001823603811361064a579190565b67ffffffffffffffff81116108925760051b60200190565b9291906109838161095f565b936109916040519586610897565b602085838152019160051b810192831161064a57905b8282106109b357505050565b81358152602091820191016109a7565b67ffffffffffffffff811161089257601f01601f191660200190565b9291926109eb826109c3565b916109f96040519384610897565b82948184528183011161064a578281602093845f960137010152565b3d15610a3f573d90610a26826109c3565b91610a346040519384610897565b82523d5f602084013e565b606090565b929190610a508161095f565b93610a5e6040519586610897565b602085838152019160051b810192831161064a57905b828210610a8057505050565b602080918335610a8f8161064e565b815201910190610a74565b929192610aa68261095f565b93610ab46040519586610897565b602085848152019260051b82019181831161064a5780935b838510610ada575050505050565b843567ffffffffffffffff811161064a57820183601f8201121561064a57602091610b0b8583858095359101610977565b815201940193610acc565b15610b1d57565b60405162461bcd60e51b815260206004820152601160248201527010985d18da081b5a5b9d0819985a5b1959607a1b6044820152606490fd5b9a9998969493929190610bc560208d60018060a01b037feae6a9186ef8c9a9c621be57187141839c5405aaab5291e1ca9745c5e148d4195416610b9881610d2e565b604051635fa15ebb60e01b81526001600160a01b0390921660048301529092839190829081906024820190565b03915afa801561050f57610be1915f91610c6c575b508d610d4d565b610be9610c8b565b610bf33384610cc9565b6040519b610c008d610875565b6001600160a01b039081168d5290811660208d015260408c01919091521660608a0152608089015260a08801523690610c38926109df565b60c08601523690610c4892610977565b60e0840152610100830152610120820152610c6290611777565b610c6a611728565b565b610c85915060203d602011610508576104f98183610897565b5f610bda565b5f516020611d155f395f51905f525460ff8116610cba5760ff19166001175f516020611d155f395f51905f5255565b6306fda65d60e31b5f5260045ffd5b6001600160a01b03918216911603610cdd57565b634e46966960e11b5f5260045ffd5b602d8111610cf75750565b63f80a484560e01b5f52600452602d60245260445ffd5b818103610d19575050565b6355c5b3e360e11b5f5260045260245260445ffd5b6001600160a01b031615610d3e57565b6329f7dfeb60e21b5f5260045ffd5b9015610d565750565b63bf29a5e560e01b5f9081526001600160a01b0391909116600452602490fd5b6040516301ffc9a760e01b8152636cdb3d1360e11b600482015290602090829060249082906001600160a01b03165afa90811561050f575f91610db7575090565b6107ff915060203d602011610508576104f98183610897565b5f527feae6a9186ef8c9a9c621be57187141839c5405aaab5291e1ca9745c5e148d41660205260ff60405f205416610e0457565b623f613760e71b5f5260045ffd5b989993949097929591969761012c8401808511610918574211610f6d5760405199610e3c8b610875565b6001600160a01b03908116808c5291811660208c0181905260408c018a9052971660608b0181905260808b0187905260a08b0183905260c08b0184905260e08b018a90526101008b01948552610120909a01948552956001600160a01b0316986001600160a01b03169760405180602081019283610eb991611cc7565b03601f1981018252610ecb9082610897565b519020925193519460405198899860208a019b610f4e998d98969492909161011c9a989694926001600160601b03199060601b168a526001600160601b03199060601b1660148a015260288901526001600160601b03199060601b166048880152605c870152607c860152609c85015260bc84015260dc83015260fc8201520190565b03601f1981018252610f609082610897565b519020906107ff91611a5e565b63480cfdff60e01b5f5260045ffd5b9015610f855750565b633bff3ba960e21b5f9081526001600160a01b0391909116600452602490fd5b6040516323b872dd60e01b60208083019182526001600160a01b039485166024840152949093166044820152606480820195909552938452925f9190610fec608482610897565b519082855af1156108d1575f513d61103357506001600160a01b0381163b155b6110135750565b635274afe760e01b5f9081526001600160a01b0391909116600452602490fd5b6001141561100c565b818103611047575050565b630d35e92160e01b5f5260045260245260445ffd5b906110668261095f565b6110736040519182610897565b8281528092611084601f199161095f565b0190602036910137565b805182101561085c5760209160051b010190565b5f1981146109185760010190565b90602080835192838152019201905f5b8181106110cd5750505090565b82518452602093840193909201916001016110c0565b6001600160a01b0390911681526040602082018190526107ff929101906110b0565b90926080926107ff959460018060a01b031683526020830152604082015281606082015201906110b0565b9061113a8261095f565b6111476040519182610897565b8281528092611158601f199161095f565b01905f5b82811061116857505050565b80606060208093850101520161115c565b92906111ac9261119e9160018060a01b031685526080602086015260808501906110b0565b9083820360408501526110b0565b906060818303910152815180825260208201916020808360051b8301019401925f915b8383106111de57505050505090565b90919293946020806111fc600193601f1986820301875289516110b0565b970193019301919392906111cf565b92908251946112198661105c565b945f5b87811061151757505f5b878110611271575050505050505f5b82811061124457505050600190565b61125e61125a611254838561108e565b51151590565b1590565b61126a57600101611235565b5050505f90565b61127e611254828961108e565b80156114fe575b6114f6576112a3611296828461108e565b516001600160a01b031690565b6001600160a01b0316905f815b8a81106114a757506001811461141f576112ea83838c8c888a878f988f906112d79061105c565b809a6112e28461105c565b9a8b94611130565b9d8e965f9a995b8a106113615750985050505050505050503b1561064a575f92838961132c604051988996879586946334e5c78560e21b865260048601611179565b03925af191821561050f57600192611347575b505b01611226565b806113555f61135b93610897565b80610752565b5f61133f565b6102346112968b6113719361108e565b1480611409575b61139a575b505050505050506001018c878f868f8f908a908f948f8b916112f1565b8880966113dc8a6113f3986113ed986113d6839f60019f9a6113f89f9a6113cf9187916113d6856113cf6113e79f869061108e565b519261108e565b5261108e565b516113d6838361108e565b5061108e565b60019052565b6110a2565b9190508c878a868f8f908a9061137d565b5061141a61125a6112548a8a61108e565b611378565b5061142a818861108e565b51611435828861108e565b51611440838761108e565b5193803b1561064a575f92838961146d60405198899687958694634aef2b1560e01b865260048601611105565b03925af191821561050f57600192611493575b5061148e6113ed828a61108e565b611341565b806113555f6114a193610897565b5f611480565b836114b8610234611296848961108e565b14806114e0575b6114cc575b6001016112b0565b906114d86001916110a2565b9190506114c4565b506114f161125a611254838d61108e565b6114bf565b600190611341565b5061151261125a6102a5611296848661108e565b611285565b611524611254828961108e565b801561170a575b6117025761153c611296828461108e565b6001600160a01b0316905f815b8a81106116b3575060018114611638576115629061105c565b915f825b8b81106115cb575050803b1561064a57604051634684d7e960e01b8152925f91849182908490829061159c908c600484016110e3565b03925af191821561050f576001926115b7575b505b0161121c565b806113555f6115c593610897565b5f6115af565b8a8a846115de610234611296868c61108e565b1480611622575b6115f4575b5050600101611566565b926113f36113ed846116189461160d826001989961108e565b516113d6868d61108e565b9190508a8a6115ea565b5061163361125a611254858561108e565b6115e5565b50611643818861108e565b5191803b1561064a576040516340c10f1960e01b81526001600160a01b038716600482015260248101939093525f908390604490829084905af191821561050f5760019261169f575b5061169a6113ed828a61108e565b6115b1565b806113555f6116ad93610897565b5f61168c565b836116c4610234611296848961108e565b14806116ec575b6116d8575b600101611549565b906116e46001916110a2565b9190506116d0565b506116fd61125a611254838d61108e565b6116cb565b6001906115b1565b5061172361125a61171e611296848661108e565b611b5c565b61152b565b60ff195f516020611d155f395f51905f5254165f516020611d155f395f51905f5255565b90926080926107ff95948352602083015260018060a01b0316604082015281606082015201906110b0565b60a081016117858151610dd0565b6020820180519092906001600160a01b0316806119bc57505f808080604085016117b081513461103c565b5f516020611cf55f395f51905f52546001600160a01b03169051905af16117d5610a15565b50156105ee575b80516117f0906001600160a01b0316610d76565b61198c575b80516001600160a01b031683519093906001600160a01b0316604083019283519060608101956118a2611862611831895160018060a01b031690565b99608085019687519685519c61010088019d8e519060e08a019a8b51936101208c01519560c08d0151974699610e12565b6001600160a01b0381165f9081527feae6a9186ef8c9a9c621be57187141839c5405aaab5291e1ca9745c5e148d415602052604090205460ff1690610f7c565b6118ae61125a83611b9d565b611968579161194161192d61191f611963946112967f03a3e760ca66142280b5d0cf81e39fe12fc88f6d9088a9754abc76096d9756c6999897515f527feae6a9186ef8c9a9c621be57187141839c5405aaab5291e1ca9745c5e148d41660205260405f20600160ff19825416179055565b98516001600160a01b031690565b93519851965194516001600160a01b031690565b90516040516001600160a01b039485169890941696939485949192918561174c565b0390a4565b81518451635c0b206f60e01b5f526001600160a01b0390911660045260245260445ffd5b60e081015151610100820151908181036119a75750506117f5565b6355c5b3e360e11b5f5260045260245260445ffd5b6119ee906001600160a01b03165f516020611cf55f395f51905f52546001600160a01b03166040840151913390610fa5565b6117dc565b60ff601b9116019060ff821161091857565b60405190611a14604083610897565b601c82527f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020830152565b6020929190611a56849282815194859201610777565b019081520190565b906041815103611b31576020810151606060408301519201515f1a90601b8210611b4c575b60ff8216601b8114159081611b40575b50611b31577f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311611b3157611b1e5f93602095611ae6611af4611ad5611a05565b926040519283918b83019586611a40565b03601f198101835282610897565b51902092604051948594859094939260ff6060936080840197845216602083015260408201520152565b838052039060015afa1561050f575f5190565b638baa579f60e01b5f5260045ffd5b601c915014155f611a93565b90611b56906119f3565b90611a83565b6040516301ffc9a760e01b8152637a54af9360e11b600482015290602090829060249082906001600160a01b03165afa90811561050f575f91610db7575090565b8051611bb1906001600160a01b0316610d76565b15611c43578051611bcc90610234906001600160a01b031681565b60608201519091906001600160a01b03169060808101519260e061010083015192015193813b1561064a575f8094611c1a60405197889687958694634aef2b1560e01b865260048601611105565b03925af1801561050f57611c2f575b50600190565b806113555f611c3d93610897565b5f611c29565b8051611c57906001600160a01b0316611b5c565b611c6057505f90565b8051611c7690610234906001600160a01b031681565b60608201519091906080906001600160a01b0316910151823b1561064a576040516340c10f1960e01b81526001600160a01b0390921660048301526024820152905f90829081838160448101611c1a565b80516020909101905f5b818110611cde5750505090565b8251845260209384019390920191600101611cd156feeae6a9186ef8c9a9c621be57187141839c5405aaab5291e1ca9745c5e148d418b1befa042b4d53fafbeae4758977ffb1efccc7a693085f849cbf75791515613da2646970667358221220218b69d2f9a30b689150cb30a5bcdafec5f35a57a3a1e55715c7e5f9f33417f764736f6c634300081c0033";

type EmblemVaultMintFacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: EmblemVaultMintFacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class EmblemVaultMintFacet__factory extends ContractFactory {
  constructor(...args: EmblemVaultMintFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      EmblemVaultMintFacet & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): EmblemVaultMintFacet__factory {
    return super.connect(runner) as EmblemVaultMintFacet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EmblemVaultMintFacetInterface {
    return new Interface(_abi) as EmblemVaultMintFacetInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): EmblemVaultMintFacet {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as EmblemVaultMintFacet;
  }
}
