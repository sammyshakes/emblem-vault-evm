/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface VaultCollectionFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createERC1155Collection"
      | "createERC721Collection"
      | "diamond"
      | "erc1155Beacon"
      | "erc721Beacon"
      | "getBeacon"
      | "getCollectionType"
      | "getImplementation"
      | "isCollection"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
      | "updateBeacon"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BeaconUpdated"
      | "CollectionOwnershipTransferred"
      | "ERC1155CollectionCreated"
      | "ERC721CollectionCreated"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createERC1155Collection",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createERC721Collection",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "diamond", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "erc1155Beacon",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "erc721Beacon",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBeacon",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollectionType",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getImplementation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isCollection",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBeacon",
    values: [BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "createERC1155Collection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createERC721Collection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "diamond", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "erc1155Beacon",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc721Beacon",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBeacon", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCollectionType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBeacon",
    data: BytesLike
  ): Result;
}

export namespace BeaconUpdatedEvent {
  export type InputTuple = [
    collectionType: BigNumberish,
    oldBeacon: AddressLike,
    newBeacon: AddressLike
  ];
  export type OutputTuple = [
    collectionType: bigint,
    oldBeacon: string,
    newBeacon: string
  ];
  export interface OutputObject {
    collectionType: bigint;
    oldBeacon: string;
    newBeacon: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollectionOwnershipTransferredEvent {
  export type InputTuple = [collection: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [collection: string, newOwner: string];
  export interface OutputObject {
    collection: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ERC1155CollectionCreatedEvent {
  export type InputTuple = [collection: AddressLike, uri: string];
  export type OutputTuple = [collection: string, uri: string];
  export interface OutputObject {
    collection: string;
    uri: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ERC721CollectionCreatedEvent {
  export type InputTuple = [
    collection: AddressLike,
    name: string,
    symbol: string
  ];
  export type OutputTuple = [collection: string, name: string, symbol: string];
  export interface OutputObject {
    collection: string;
    name: string;
    symbol: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VaultCollectionFactory extends BaseContract {
  connect(runner?: ContractRunner | null): VaultCollectionFactory;
  waitForDeployment(): Promise<this>;

  interface: VaultCollectionFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createERC1155Collection: TypedContractMethod<
    [uri: string],
    [string],
    "nonpayable"
  >;

  createERC721Collection: TypedContractMethod<
    [name: string, symbol: string],
    [string],
    "nonpayable"
  >;

  diamond: TypedContractMethod<[], [string], "view">;

  erc1155Beacon: TypedContractMethod<[], [string], "view">;

  erc721Beacon: TypedContractMethod<[], [string], "view">;

  getBeacon: TypedContractMethod<
    [collectionType: BigNumberish],
    [string],
    "view"
  >;

  getCollectionType: TypedContractMethod<
    [collection: AddressLike],
    [bigint],
    "view"
  >;

  getImplementation: TypedContractMethod<
    [collectionType: BigNumberish],
    [string],
    "view"
  >;

  isCollection: TypedContractMethod<
    [collection: AddressLike],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateBeacon: TypedContractMethod<
    [collectionType: BigNumberish, newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createERC1155Collection"
  ): TypedContractMethod<[uri: string], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "createERC721Collection"
  ): TypedContractMethod<
    [name: string, symbol: string],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "diamond"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "erc1155Beacon"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "erc721Beacon"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getBeacon"
  ): TypedContractMethod<[collectionType: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getCollectionType"
  ): TypedContractMethod<[collection: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getImplementation"
  ): TypedContractMethod<[collectionType: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "isCollection"
  ): TypedContractMethod<[collection: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateBeacon"
  ): TypedContractMethod<
    [collectionType: BigNumberish, newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "BeaconUpdated"
  ): TypedContractEvent<
    BeaconUpdatedEvent.InputTuple,
    BeaconUpdatedEvent.OutputTuple,
    BeaconUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "CollectionOwnershipTransferred"
  ): TypedContractEvent<
    CollectionOwnershipTransferredEvent.InputTuple,
    CollectionOwnershipTransferredEvent.OutputTuple,
    CollectionOwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ERC1155CollectionCreated"
  ): TypedContractEvent<
    ERC1155CollectionCreatedEvent.InputTuple,
    ERC1155CollectionCreatedEvent.OutputTuple,
    ERC1155CollectionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ERC721CollectionCreated"
  ): TypedContractEvent<
    ERC721CollectionCreatedEvent.InputTuple,
    ERC721CollectionCreatedEvent.OutputTuple,
    ERC721CollectionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "BeaconUpdated(uint8,address,address)": TypedContractEvent<
      BeaconUpdatedEvent.InputTuple,
      BeaconUpdatedEvent.OutputTuple,
      BeaconUpdatedEvent.OutputObject
    >;
    BeaconUpdated: TypedContractEvent<
      BeaconUpdatedEvent.InputTuple,
      BeaconUpdatedEvent.OutputTuple,
      BeaconUpdatedEvent.OutputObject
    >;

    "CollectionOwnershipTransferred(address,address)": TypedContractEvent<
      CollectionOwnershipTransferredEvent.InputTuple,
      CollectionOwnershipTransferredEvent.OutputTuple,
      CollectionOwnershipTransferredEvent.OutputObject
    >;
    CollectionOwnershipTransferred: TypedContractEvent<
      CollectionOwnershipTransferredEvent.InputTuple,
      CollectionOwnershipTransferredEvent.OutputTuple,
      CollectionOwnershipTransferredEvent.OutputObject
    >;

    "ERC1155CollectionCreated(address,string)": TypedContractEvent<
      ERC1155CollectionCreatedEvent.InputTuple,
      ERC1155CollectionCreatedEvent.OutputTuple,
      ERC1155CollectionCreatedEvent.OutputObject
    >;
    ERC1155CollectionCreated: TypedContractEvent<
      ERC1155CollectionCreatedEvent.InputTuple,
      ERC1155CollectionCreatedEvent.OutputTuple,
      ERC1155CollectionCreatedEvent.OutputObject
    >;

    "ERC721CollectionCreated(address,string,string)": TypedContractEvent<
      ERC721CollectionCreatedEvent.InputTuple,
      ERC721CollectionCreatedEvent.OutputTuple,
      ERC721CollectionCreatedEvent.OutputObject
    >;
    ERC721CollectionCreated: TypedContractEvent<
      ERC721CollectionCreatedEvent.InputTuple,
      ERC721CollectionCreatedEvent.OutputTuple,
      ERC721CollectionCreatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
