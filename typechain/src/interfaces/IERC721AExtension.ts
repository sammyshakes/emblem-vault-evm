/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IERC721AExtensionInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getExternalTokenId"
      | "getInternalTokenId"
      | "setBaseURI"
      | "setDetails"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getExternalTokenId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getInternalTokenId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setBaseURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setDetails",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "getExternalTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInternalTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setDetails", data: BytesLike): Result;
}

export interface IERC721AExtension extends BaseContract {
  connect(runner?: ContractRunner | null): IERC721AExtension;
  waitForDeployment(): Promise<this>;

  interface: IERC721AExtensionInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getExternalTokenId: TypedContractMethod<
    [internalTokenId: BigNumberish],
    [bigint],
    "view"
  >;

  getInternalTokenId: TypedContractMethod<
    [externalTokenId: BigNumberish],
    [bigint],
    "view"
  >;

  setBaseURI: TypedContractMethod<[baseURI: string], [void], "nonpayable">;

  setDetails: TypedContractMethod<
    [name_: string, symbol_: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getExternalTokenId"
  ): TypedContractMethod<[internalTokenId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getInternalTokenId"
  ): TypedContractMethod<[externalTokenId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "setBaseURI"
  ): TypedContractMethod<[baseURI: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDetails"
  ): TypedContractMethod<
    [name_: string, symbol_: string],
    [void],
    "nonpayable"
  >;

  filters: {};
}
