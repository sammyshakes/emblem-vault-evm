/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IIsSerializedInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getFirstSerialByOwner"
      | "getOwnerOfSerial"
      | "getSerialByOwnerAtIndex"
      | "getSerials"
      | "getTokenIdForSerialNumber"
      | "isSerialized"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getFirstSerialByOwner",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnerOfSerial",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSerialByOwnerAtIndex",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSerials",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenIdForSerialNumber",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isSerialized",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getFirstSerialByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnerOfSerial",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSerialByOwnerAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSerials", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokenIdForSerialNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSerialized",
    data: BytesLike
  ): Result;
}

export interface IIsSerialized extends BaseContract {
  connect(runner?: ContractRunner | null): IIsSerialized;
  waitForDeployment(): Promise<this>;

  interface: IIsSerializedInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFirstSerialByOwner: TypedContractMethod<
    [owner: AddressLike, tokenId: BigNumberish],
    [bigint],
    "view"
  >;

  getOwnerOfSerial: TypedContractMethod<
    [serialNumber: BigNumberish],
    [string],
    "view"
  >;

  getSerialByOwnerAtIndex: TypedContractMethod<
    [_owner: AddressLike, tokenId: BigNumberish, index: BigNumberish],
    [bigint],
    "view"
  >;

  getSerials: TypedContractMethod<
    [owner: AddressLike, tokenId: BigNumberish],
    [bigint[]],
    "view"
  >;

  getTokenIdForSerialNumber: TypedContractMethod<
    [serialNumber: BigNumberish],
    [bigint],
    "view"
  >;

  isSerialized: TypedContractMethod<[], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getFirstSerialByOwner"
  ): TypedContractMethod<
    [owner: AddressLike, tokenId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOwnerOfSerial"
  ): TypedContractMethod<[serialNumber: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getSerialByOwnerAtIndex"
  ): TypedContractMethod<
    [_owner: AddressLike, tokenId: BigNumberish, index: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSerials"
  ): TypedContractMethod<
    [owner: AddressLike, tokenId: BigNumberish],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTokenIdForSerialNumber"
  ): TypedContractMethod<[serialNumber: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "isSerialized"
  ): TypedContractMethod<[], [boolean], "view">;

  filters: {};
}
