/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace EmblemVaultUnvaultFacet {
  export type BatchUnvaultParamsStruct = {
    nftAddresses: AddressLike[];
    tokenIds: BigNumberish[];
    nonces: BigNumberish[];
    payments: AddressLike[];
    prices: BigNumberish[];
    signatures: BytesLike[];
    timestamp: BigNumberish;
  };

  export type BatchUnvaultParamsStructOutput = [
    nftAddresses: string[],
    tokenIds: bigint[],
    nonces: bigint[],
    payments: string[],
    prices: bigint[],
    signatures: string[],
    timestamp: bigint
  ] & {
    nftAddresses: string[];
    tokenIds: bigint[];
    nonces: bigint[];
    payments: string[];
    prices: bigint[];
    signatures: string[];
    timestamp: bigint;
  };
}

export interface EmblemVaultUnvaultFacetInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_BATCH_SIZE"
      | "batchUnvaultWithSignedPrice"
      | "getCollectionUnvaultCount"
      | "getTokenUnvaulter"
      | "getUnvaultVersion"
      | "isTokenUnvaulted"
      | "setBurnAddress"
      | "setUnvaultingEnabled"
      | "unvault"
      | "unvaultWithSignedPrice"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BurnAddressUpdated"
      | "TokenUnvaulted"
      | "TokenUnvaultedWithPrice"
      | "UnvaultingEnabled"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_BATCH_SIZE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batchUnvaultWithSignedPrice",
    values: [EmblemVaultUnvaultFacet.BatchUnvaultParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollectionUnvaultCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenUnvaulter",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnvaultVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenUnvaulted",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBurnAddress",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setUnvaultingEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "unvault",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unvaultWithSignedPrice",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BytesLike,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_BATCH_SIZE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchUnvaultWithSignedPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollectionUnvaultCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenUnvaulter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnvaultVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTokenUnvaulted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBurnAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUnvaultingEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unvault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unvaultWithSignedPrice",
    data: BytesLike
  ): Result;
}

export namespace BurnAddressUpdatedEvent {
  export type InputTuple = [addr: AddressLike, isBurn: boolean];
  export type OutputTuple = [addr: string, isBurn: boolean];
  export interface OutputObject {
    addr: string;
    isBurn: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenUnvaultedEvent {
  export type InputTuple = [
    nftAddress: AddressLike,
    tokenId: BigNumberish,
    unvaulter: AddressLike,
    serialNumber: BigNumberish,
    data: BytesLike
  ];
  export type OutputTuple = [
    nftAddress: string,
    tokenId: bigint,
    unvaulter: string,
    serialNumber: bigint,
    data: string
  ];
  export interface OutputObject {
    nftAddress: string;
    tokenId: bigint;
    unvaulter: string;
    serialNumber: bigint;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenUnvaultedWithPriceEvent {
  export type InputTuple = [
    nftAddress: AddressLike,
    tokenId: BigNumberish,
    unvaulter: AddressLike,
    price: BigNumberish,
    serialNumber: BigNumberish,
    data: BytesLike
  ];
  export type OutputTuple = [
    nftAddress: string,
    tokenId: bigint,
    unvaulter: string,
    price: bigint,
    serialNumber: bigint,
    data: string
  ];
  export interface OutputObject {
    nftAddress: string;
    tokenId: bigint;
    unvaulter: string;
    price: bigint;
    serialNumber: bigint;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnvaultingEnabledEvent {
  export type InputTuple = [enabled: boolean];
  export type OutputTuple = [enabled: boolean];
  export interface OutputObject {
    enabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EmblemVaultUnvaultFacet extends BaseContract {
  connect(runner?: ContractRunner | null): EmblemVaultUnvaultFacet;
  waitForDeployment(): Promise<this>;

  interface: EmblemVaultUnvaultFacetInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_BATCH_SIZE: TypedContractMethod<[], [bigint], "view">;

  batchUnvaultWithSignedPrice: TypedContractMethod<
    [params: EmblemVaultUnvaultFacet.BatchUnvaultParamsStruct],
    [void],
    "payable"
  >;

  getCollectionUnvaultCount: TypedContractMethod<
    [nft: AddressLike],
    [bigint],
    "view"
  >;

  getTokenUnvaulter: TypedContractMethod<
    [nft: AddressLike, id: BigNumberish],
    [string],
    "view"
  >;

  getUnvaultVersion: TypedContractMethod<[], [string], "view">;

  isTokenUnvaulted: TypedContractMethod<
    [nft: AddressLike, id: BigNumberish],
    [boolean],
    "view"
  >;

  setBurnAddress: TypedContractMethod<
    [addr: AddressLike, isBurn: boolean],
    [void],
    "nonpayable"
  >;

  setUnvaultingEnabled: TypedContractMethod<
    [enabled: boolean],
    [void],
    "nonpayable"
  >;

  unvault: TypedContractMethod<
    [_nftAddress: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  unvaultWithSignedPrice: TypedContractMethod<
    [
      _nftAddress: AddressLike,
      _tokenId: BigNumberish,
      _nonce: BigNumberish,
      _payment: AddressLike,
      _price: BigNumberish,
      _signature: BytesLike,
      _timestamp: BigNumberish
    ],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_BATCH_SIZE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "batchUnvaultWithSignedPrice"
  ): TypedContractMethod<
    [params: EmblemVaultUnvaultFacet.BatchUnvaultParamsStruct],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getCollectionUnvaultCount"
  ): TypedContractMethod<[nft: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTokenUnvaulter"
  ): TypedContractMethod<
    [nft: AddressLike, id: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUnvaultVersion"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isTokenUnvaulted"
  ): TypedContractMethod<
    [nft: AddressLike, id: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "setBurnAddress"
  ): TypedContractMethod<
    [addr: AddressLike, isBurn: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setUnvaultingEnabled"
  ): TypedContractMethod<[enabled: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unvault"
  ): TypedContractMethod<
    [_nftAddress: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unvaultWithSignedPrice"
  ): TypedContractMethod<
    [
      _nftAddress: AddressLike,
      _tokenId: BigNumberish,
      _nonce: BigNumberish,
      _payment: AddressLike,
      _price: BigNumberish,
      _signature: BytesLike,
      _timestamp: BigNumberish
    ],
    [void],
    "payable"
  >;

  getEvent(
    key: "BurnAddressUpdated"
  ): TypedContractEvent<
    BurnAddressUpdatedEvent.InputTuple,
    BurnAddressUpdatedEvent.OutputTuple,
    BurnAddressUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TokenUnvaulted"
  ): TypedContractEvent<
    TokenUnvaultedEvent.InputTuple,
    TokenUnvaultedEvent.OutputTuple,
    TokenUnvaultedEvent.OutputObject
  >;
  getEvent(
    key: "TokenUnvaultedWithPrice"
  ): TypedContractEvent<
    TokenUnvaultedWithPriceEvent.InputTuple,
    TokenUnvaultedWithPriceEvent.OutputTuple,
    TokenUnvaultedWithPriceEvent.OutputObject
  >;
  getEvent(
    key: "UnvaultingEnabled"
  ): TypedContractEvent<
    UnvaultingEnabledEvent.InputTuple,
    UnvaultingEnabledEvent.OutputTuple,
    UnvaultingEnabledEvent.OutputObject
  >;

  filters: {
    "BurnAddressUpdated(address,bool)": TypedContractEvent<
      BurnAddressUpdatedEvent.InputTuple,
      BurnAddressUpdatedEvent.OutputTuple,
      BurnAddressUpdatedEvent.OutputObject
    >;
    BurnAddressUpdated: TypedContractEvent<
      BurnAddressUpdatedEvent.InputTuple,
      BurnAddressUpdatedEvent.OutputTuple,
      BurnAddressUpdatedEvent.OutputObject
    >;

    "TokenUnvaulted(address,uint256,address,uint256,bytes)": TypedContractEvent<
      TokenUnvaultedEvent.InputTuple,
      TokenUnvaultedEvent.OutputTuple,
      TokenUnvaultedEvent.OutputObject
    >;
    TokenUnvaulted: TypedContractEvent<
      TokenUnvaultedEvent.InputTuple,
      TokenUnvaultedEvent.OutputTuple,
      TokenUnvaultedEvent.OutputObject
    >;

    "TokenUnvaultedWithPrice(address,uint256,address,uint256,uint256,bytes)": TypedContractEvent<
      TokenUnvaultedWithPriceEvent.InputTuple,
      TokenUnvaultedWithPriceEvent.OutputTuple,
      TokenUnvaultedWithPriceEvent.OutputObject
    >;
    TokenUnvaultedWithPrice: TypedContractEvent<
      TokenUnvaultedWithPriceEvent.InputTuple,
      TokenUnvaultedWithPriceEvent.OutputTuple,
      TokenUnvaultedWithPriceEvent.OutputObject
    >;

    "UnvaultingEnabled(bool)": TypedContractEvent<
      UnvaultingEnabledEvent.InputTuple,
      UnvaultingEnabledEvent.OutputTuple,
      UnvaultingEnabledEvent.OutputObject
    >;
    UnvaultingEnabled: TypedContractEvent<
      UnvaultingEnabledEvent.InputTuple,
      UnvaultingEnabledEvent.OutputTuple,
      UnvaultingEnabledEvent.OutputObject
    >;
  };
}
