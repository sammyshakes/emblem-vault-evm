/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace DiamondLoupeFacetOptimized {
  export type FacetStruct = {
    facetAddress: AddressLike;
    functionSelectors: BytesLike[];
  };

  export type FacetStructOutput = [
    facetAddress: string,
    functionSelectors: string[]
  ] & { facetAddress: string; functionSelectors: string[] };
}

export interface DiamondLoupeFacetOptimizedInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "batchFacetFunctionSelectors"
      | "batchFacets"
      | "facetAddresses"
      | "facetFunctionSelectors"
      | "facets"
      | "getFacetAddress"
      | "getFacetAddresses"
      | "supportsInterface"
      | "supportsInterfaces"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "batchFacetFunctionSelectors",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchFacets",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "facetFunctionSelectors",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "facets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getFacetAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFacetAddresses",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterfaces",
    values: [BytesLike[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "batchFacetFunctionSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchFacets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetFunctionSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "facets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFacetAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFacetAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterfaces",
    data: BytesLike
  ): Result;
}

export interface DiamondLoupeFacetOptimized extends BaseContract {
  connect(runner?: ContractRunner | null): DiamondLoupeFacetOptimized;
  waitForDeployment(): Promise<this>;

  interface: DiamondLoupeFacetOptimizedInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  batchFacetFunctionSelectors: TypedContractMethod<
    [_facets: AddressLike[]],
    [string[][]],
    "view"
  >;

  batchFacets: TypedContractMethod<
    [_facetAddresses: AddressLike[]],
    [DiamondLoupeFacetOptimized.FacetStructOutput[]],
    "view"
  >;

  facetAddresses: TypedContractMethod<[], [string[]], "view">;

  facetFunctionSelectors: TypedContractMethod<
    [_facet: AddressLike],
    [string[]],
    "view"
  >;

  facets: TypedContractMethod<
    [],
    [DiamondLoupeFacetOptimized.FacetStructOutput[]],
    "view"
  >;

  getFacetAddress: TypedContractMethod<
    [_functionSelector: BytesLike],
    [string],
    "view"
  >;

  getFacetAddresses: TypedContractMethod<
    [_selectors: BytesLike[]],
    [string[]],
    "view"
  >;

  supportsInterface: TypedContractMethod<
    [_interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  supportsInterfaces: TypedContractMethod<
    [_interfaceIds: BytesLike[]],
    [boolean[]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "batchFacetFunctionSelectors"
  ): TypedContractMethod<[_facets: AddressLike[]], [string[][]], "view">;
  getFunction(
    nameOrSignature: "batchFacets"
  ): TypedContractMethod<
    [_facetAddresses: AddressLike[]],
    [DiamondLoupeFacetOptimized.FacetStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "facetAddresses"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "facetFunctionSelectors"
  ): TypedContractMethod<[_facet: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "facets"
  ): TypedContractMethod<
    [],
    [DiamondLoupeFacetOptimized.FacetStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFacetAddress"
  ): TypedContractMethod<[_functionSelector: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getFacetAddresses"
  ): TypedContractMethod<[_selectors: BytesLike[]], [string[]], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[_interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "supportsInterfaces"
  ): TypedContractMethod<[_interfaceIds: BytesLike[]], [boolean[]], "view">;

  filters: {};
}
