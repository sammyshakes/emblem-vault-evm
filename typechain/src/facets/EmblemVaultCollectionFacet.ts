/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface EmblemVaultCollectionFacetInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createVaultCollection"
      | "getCollectionBeacon"
      | "getCollectionFactory"
      | "getCollectionImplementation"
      | "getCollectionOwner"
      | "getCollectionType"
      | "getCollectionVersion"
      | "isCollection"
      | "setCollectionBaseURI"
      | "setCollectionFactory"
      | "setCollectionOwner"
      | "setCollectionURI"
      | "upgradeCollectionImplementation"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CollectionBaseURIUpdated"
      | "CollectionFactorySet"
      | "CollectionImplementationUpgraded"
      | "CollectionOwnerSet"
      | "CollectionURIUpdated"
      | "VaultCollectionCreated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createVaultCollection",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollectionBeacon",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollectionFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCollectionImplementation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollectionOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCollectionType",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollectionVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isCollection",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollectionBaseURI",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollectionFactory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollectionOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollectionURI",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeCollectionImplementation",
    values: [BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "createVaultCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollectionBeacon",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollectionFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollectionImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollectionOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollectionType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollectionVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollectionBaseURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollectionFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollectionOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollectionURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeCollectionImplementation",
    data: BytesLike
  ): Result;
}

export namespace CollectionBaseURIUpdatedEvent {
  export type InputTuple = [collection: AddressLike, newBaseURI: string];
  export type OutputTuple = [collection: string, newBaseURI: string];
  export interface OutputObject {
    collection: string;
    newBaseURI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollectionFactorySetEvent {
  export type InputTuple = [oldFactory: AddressLike, newFactory: AddressLike];
  export type OutputTuple = [oldFactory: string, newFactory: string];
  export interface OutputObject {
    oldFactory: string;
    newFactory: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollectionImplementationUpgradedEvent {
  export type InputTuple = [
    collectionType: BigNumberish,
    newImplementation: AddressLike
  ];
  export type OutputTuple = [collectionType: bigint, newImplementation: string];
  export interface OutputObject {
    collectionType: bigint;
    newImplementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollectionOwnerSetEvent {
  export type InputTuple = [owner: AddressLike];
  export type OutputTuple = [owner: string];
  export interface OutputObject {
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollectionURIUpdatedEvent {
  export type InputTuple = [collection: AddressLike, newURI: string];
  export type OutputTuple = [collection: string, newURI: string];
  export interface OutputObject {
    collection: string;
    newURI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VaultCollectionCreatedEvent {
  export type InputTuple = [
    collection: AddressLike,
    collectionType: BigNumberish,
    name: string
  ];
  export type OutputTuple = [
    collection: string,
    collectionType: bigint,
    name: string
  ];
  export interface OutputObject {
    collection: string;
    collectionType: bigint;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EmblemVaultCollectionFacet extends BaseContract {
  connect(runner?: ContractRunner | null): EmblemVaultCollectionFacet;
  waitForDeployment(): Promise<this>;

  interface: EmblemVaultCollectionFacetInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createVaultCollection: TypedContractMethod<
    [name: string, symbol: string, collectionType: BigNumberish],
    [string],
    "nonpayable"
  >;

  getCollectionBeacon: TypedContractMethod<
    [collectionType: BigNumberish],
    [string],
    "view"
  >;

  getCollectionFactory: TypedContractMethod<[], [string], "view">;

  getCollectionImplementation: TypedContractMethod<
    [collectionType: BigNumberish],
    [string],
    "view"
  >;

  getCollectionOwner: TypedContractMethod<[], [string], "view">;

  getCollectionType: TypedContractMethod<
    [collection: AddressLike],
    [bigint],
    "view"
  >;

  getCollectionVersion: TypedContractMethod<[], [string], "view">;

  isCollection: TypedContractMethod<
    [collection: AddressLike],
    [boolean],
    "view"
  >;

  setCollectionBaseURI: TypedContractMethod<
    [collection: AddressLike, newBaseURI: string],
    [void],
    "nonpayable"
  >;

  setCollectionFactory: TypedContractMethod<
    [_factory: AddressLike],
    [void],
    "nonpayable"
  >;

  setCollectionOwner: TypedContractMethod<
    [owner: AddressLike],
    [void],
    "nonpayable"
  >;

  setCollectionURI: TypedContractMethod<
    [collection: AddressLike, newURI: string],
    [void],
    "nonpayable"
  >;

  upgradeCollectionImplementation: TypedContractMethod<
    [collectionType: BigNumberish, newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createVaultCollection"
  ): TypedContractMethod<
    [name: string, symbol: string, collectionType: BigNumberish],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getCollectionBeacon"
  ): TypedContractMethod<[collectionType: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getCollectionFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getCollectionImplementation"
  ): TypedContractMethod<[collectionType: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getCollectionOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getCollectionType"
  ): TypedContractMethod<[collection: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCollectionVersion"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isCollection"
  ): TypedContractMethod<[collection: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "setCollectionBaseURI"
  ): TypedContractMethod<
    [collection: AddressLike, newBaseURI: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCollectionFactory"
  ): TypedContractMethod<[_factory: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCollectionOwner"
  ): TypedContractMethod<[owner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCollectionURI"
  ): TypedContractMethod<
    [collection: AddressLike, newURI: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeCollectionImplementation"
  ): TypedContractMethod<
    [collectionType: BigNumberish, newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "CollectionBaseURIUpdated"
  ): TypedContractEvent<
    CollectionBaseURIUpdatedEvent.InputTuple,
    CollectionBaseURIUpdatedEvent.OutputTuple,
    CollectionBaseURIUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "CollectionFactorySet"
  ): TypedContractEvent<
    CollectionFactorySetEvent.InputTuple,
    CollectionFactorySetEvent.OutputTuple,
    CollectionFactorySetEvent.OutputObject
  >;
  getEvent(
    key: "CollectionImplementationUpgraded"
  ): TypedContractEvent<
    CollectionImplementationUpgradedEvent.InputTuple,
    CollectionImplementationUpgradedEvent.OutputTuple,
    CollectionImplementationUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "CollectionOwnerSet"
  ): TypedContractEvent<
    CollectionOwnerSetEvent.InputTuple,
    CollectionOwnerSetEvent.OutputTuple,
    CollectionOwnerSetEvent.OutputObject
  >;
  getEvent(
    key: "CollectionURIUpdated"
  ): TypedContractEvent<
    CollectionURIUpdatedEvent.InputTuple,
    CollectionURIUpdatedEvent.OutputTuple,
    CollectionURIUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "VaultCollectionCreated"
  ): TypedContractEvent<
    VaultCollectionCreatedEvent.InputTuple,
    VaultCollectionCreatedEvent.OutputTuple,
    VaultCollectionCreatedEvent.OutputObject
  >;

  filters: {
    "CollectionBaseURIUpdated(address,string)": TypedContractEvent<
      CollectionBaseURIUpdatedEvent.InputTuple,
      CollectionBaseURIUpdatedEvent.OutputTuple,
      CollectionBaseURIUpdatedEvent.OutputObject
    >;
    CollectionBaseURIUpdated: TypedContractEvent<
      CollectionBaseURIUpdatedEvent.InputTuple,
      CollectionBaseURIUpdatedEvent.OutputTuple,
      CollectionBaseURIUpdatedEvent.OutputObject
    >;

    "CollectionFactorySet(address,address)": TypedContractEvent<
      CollectionFactorySetEvent.InputTuple,
      CollectionFactorySetEvent.OutputTuple,
      CollectionFactorySetEvent.OutputObject
    >;
    CollectionFactorySet: TypedContractEvent<
      CollectionFactorySetEvent.InputTuple,
      CollectionFactorySetEvent.OutputTuple,
      CollectionFactorySetEvent.OutputObject
    >;

    "CollectionImplementationUpgraded(uint8,address)": TypedContractEvent<
      CollectionImplementationUpgradedEvent.InputTuple,
      CollectionImplementationUpgradedEvent.OutputTuple,
      CollectionImplementationUpgradedEvent.OutputObject
    >;
    CollectionImplementationUpgraded: TypedContractEvent<
      CollectionImplementationUpgradedEvent.InputTuple,
      CollectionImplementationUpgradedEvent.OutputTuple,
      CollectionImplementationUpgradedEvent.OutputObject
    >;

    "CollectionOwnerSet(address)": TypedContractEvent<
      CollectionOwnerSetEvent.InputTuple,
      CollectionOwnerSetEvent.OutputTuple,
      CollectionOwnerSetEvent.OutputObject
    >;
    CollectionOwnerSet: TypedContractEvent<
      CollectionOwnerSetEvent.InputTuple,
      CollectionOwnerSetEvent.OutputTuple,
      CollectionOwnerSetEvent.OutputObject
    >;

    "CollectionURIUpdated(address,string)": TypedContractEvent<
      CollectionURIUpdatedEvent.InputTuple,
      CollectionURIUpdatedEvent.OutputTuple,
      CollectionURIUpdatedEvent.OutputObject
    >;
    CollectionURIUpdated: TypedContractEvent<
      CollectionURIUpdatedEvent.InputTuple,
      CollectionURIUpdatedEvent.OutputTuple,
      CollectionURIUpdatedEvent.OutputObject
    >;

    "VaultCollectionCreated(address,uint8,string)": TypedContractEvent<
      VaultCollectionCreatedEvent.InputTuple,
      VaultCollectionCreatedEvent.OutputTuple,
      VaultCollectionCreatedEvent.OutputObject
    >;
    VaultCollectionCreated: TypedContractEvent<
      VaultCollectionCreatedEvent.InputTuple,
      VaultCollectionCreatedEvent.OutputTuple,
      VaultCollectionCreatedEvent.OutputObject
    >;
  };
}
