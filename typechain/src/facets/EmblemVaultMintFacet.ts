/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace EmblemVaultMintFacet {
  export type BatchBuyParamsStruct = {
    nftAddresses: AddressLike[];
    payment: AddressLike;
    prices: BigNumberish[];
    to: AddressLike;
    tokenIds: BigNumberish[];
    nonces: BigNumberish[];
    signatures: BytesLike[];
    serialNumbers: BigNumberish[][];
    amounts: BigNumberish[];
    timestamp: BigNumberish;
  };

  export type BatchBuyParamsStructOutput = [
    nftAddresses: string[],
    payment: string,
    prices: bigint[],
    to: string,
    tokenIds: bigint[],
    nonces: bigint[],
    signatures: string[],
    serialNumbers: bigint[][],
    amounts: bigint[],
    timestamp: bigint
  ] & {
    nftAddresses: string[];
    payment: string;
    prices: bigint[];
    to: string;
    tokenIds: bigint[];
    nonces: bigint[];
    signatures: string[];
    serialNumbers: bigint[][];
    amounts: bigint[];
    timestamp: bigint;
  };
}

export interface EmblemVaultMintFacetInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_BATCH_SIZE"
      | "batchBuyWithSignedPrice"
      | "buyWithSignedPrice"
      | "getMintVersion"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "TokenMinted"): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_BATCH_SIZE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batchBuyWithSignedPrice",
    values: [EmblemVaultMintFacet.BatchBuyParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "buyWithSignedPrice",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish[],
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getMintVersion",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_BATCH_SIZE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchBuyWithSignedPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyWithSignedPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMintVersion",
    data: BytesLike
  ): Result;
}

export namespace TokenMintedEvent {
  export type InputTuple = [
    nftAddress: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish,
    amount: BigNumberish,
    price: BigNumberish,
    paymentToken: AddressLike,
    serialNumbers: BigNumberish[]
  ];
  export type OutputTuple = [
    nftAddress: string,
    to: string,
    tokenId: bigint,
    amount: bigint,
    price: bigint,
    paymentToken: string,
    serialNumbers: bigint[]
  ];
  export interface OutputObject {
    nftAddress: string;
    to: string;
    tokenId: bigint;
    amount: bigint;
    price: bigint;
    paymentToken: string;
    serialNumbers: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EmblemVaultMintFacet extends BaseContract {
  connect(runner?: ContractRunner | null): EmblemVaultMintFacet;
  waitForDeployment(): Promise<this>;

  interface: EmblemVaultMintFacetInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_BATCH_SIZE: TypedContractMethod<[], [bigint], "view">;

  batchBuyWithSignedPrice: TypedContractMethod<
    [params: EmblemVaultMintFacet.BatchBuyParamsStruct],
    [void],
    "payable"
  >;

  buyWithSignedPrice: TypedContractMethod<
    [
      _nftAddress: AddressLike,
      _payment: AddressLike,
      _price: BigNumberish,
      _to: AddressLike,
      _tokenId: BigNumberish,
      _nonce: BigNumberish,
      _signature: BytesLike,
      _serialNumbers: BigNumberish[],
      _amount: BigNumberish,
      _timestamp: BigNumberish
    ],
    [void],
    "payable"
  >;

  getMintVersion: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_BATCH_SIZE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "batchBuyWithSignedPrice"
  ): TypedContractMethod<
    [params: EmblemVaultMintFacet.BatchBuyParamsStruct],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "buyWithSignedPrice"
  ): TypedContractMethod<
    [
      _nftAddress: AddressLike,
      _payment: AddressLike,
      _price: BigNumberish,
      _to: AddressLike,
      _tokenId: BigNumberish,
      _nonce: BigNumberish,
      _signature: BytesLike,
      _serialNumbers: BigNumberish[],
      _amount: BigNumberish,
      _timestamp: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getMintVersion"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "TokenMinted"
  ): TypedContractEvent<
    TokenMintedEvent.InputTuple,
    TokenMintedEvent.OutputTuple,
    TokenMintedEvent.OutputObject
  >;

  filters: {
    "TokenMinted(address,address,uint256,uint256,uint256,address,uint256[])": TypedContractEvent<
      TokenMintedEvent.InputTuple,
      TokenMintedEvent.OutputTuple,
      TokenMintedEvent.OutputObject
    >;
    TokenMinted: TypedContractEvent<
      TokenMintedEvent.InputTuple,
      TokenMintedEvent.OutputTuple,
      TokenMintedEvent.OutputObject
    >;
  };
}
