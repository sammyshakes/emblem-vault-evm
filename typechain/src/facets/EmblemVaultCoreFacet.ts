/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface EmblemVaultCoreFacetInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addBypassRule"
      | "addWitness"
      | "getCoreVersion"
      | "getMetadataBaseUri"
      | "getRecipientAddress"
      | "getVaultFactory"
      | "getWitnessCount"
      | "isVaultLocked"
      | "isWitness"
      | "lockVault"
      | "removeBypassRule"
      | "removeWitness"
      | "setMetadataBaseUri"
      | "setRecipientAddress"
      | "setVaultFactory"
      | "toggleBypassability"
      | "unlockVault"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BypassRuleAdded"
      | "BypassRuleRemoved"
      | "BypassabilityToggled"
      | "MetadataBaseUriChanged"
      | "RecipientAddressChanged"
      | "VaultFactorySet"
      | "VaultLocked"
      | "VaultUnlocked"
      | "WitnessAdded"
      | "WitnessRemoved"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addBypassRule",
    values: [AddressLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addWitness",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCoreVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMetadataBaseUri",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRecipientAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWitnessCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isVaultLocked",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isWitness",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lockVault",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeBypassRule",
    values: [AddressLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeWitness",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMetadataBaseUri",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRecipientAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setVaultFactory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleBypassability",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unlockVault",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addBypassRule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addWitness", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCoreVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMetadataBaseUri",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecipientAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWitnessCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isVaultLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isWitness", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeBypassRule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeWitness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMetadataBaseUri",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRecipientAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVaultFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleBypassability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockVault",
    data: BytesLike
  ): Result;
}

export namespace BypassRuleAddedEvent {
  export type InputTuple = [
    who: AddressLike,
    functionSig: BytesLike,
    id: BigNumberish
  ];
  export type OutputTuple = [who: string, functionSig: string, id: bigint];
  export interface OutputObject {
    who: string;
    functionSig: string;
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BypassRuleRemovedEvent {
  export type InputTuple = [
    who: AddressLike,
    functionSig: BytesLike,
    id: BigNumberish
  ];
  export type OutputTuple = [who: string, functionSig: string, id: bigint];
  export interface OutputObject {
    who: string;
    functionSig: string;
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BypassabilityToggledEvent {
  export type InputTuple = [newState: boolean];
  export type OutputTuple = [newState: boolean];
  export interface OutputObject {
    newState: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MetadataBaseUriChangedEvent {
  export type InputTuple = [oldUri: string, newUri: string];
  export type OutputTuple = [oldUri: string, newUri: string];
  export interface OutputObject {
    oldUri: string;
    newUri: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecipientAddressChangedEvent {
  export type InputTuple = [
    oldRecipient: AddressLike,
    newRecipient: AddressLike
  ];
  export type OutputTuple = [oldRecipient: string, newRecipient: string];
  export interface OutputObject {
    oldRecipient: string;
    newRecipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VaultFactorySetEvent {
  export type InputTuple = [oldFactory: AddressLike, newFactory: AddressLike];
  export type OutputTuple = [oldFactory: string, newFactory: string];
  export interface OutputObject {
    oldFactory: string;
    newFactory: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VaultLockedEvent {
  export type InputTuple = [
    nftAddress: AddressLike,
    tokenId: BigNumberish,
    owner: AddressLike
  ];
  export type OutputTuple = [
    nftAddress: string,
    tokenId: bigint,
    owner: string
  ];
  export interface OutputObject {
    nftAddress: string;
    tokenId: bigint;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VaultUnlockedEvent {
  export type InputTuple = [
    nftAddress: AddressLike,
    tokenId: BigNumberish,
    owner: AddressLike
  ];
  export type OutputTuple = [
    nftAddress: string,
    tokenId: bigint,
    owner: string
  ];
  export interface OutputObject {
    nftAddress: string;
    tokenId: bigint;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WitnessAddedEvent {
  export type InputTuple = [witness: AddressLike, newCount: BigNumberish];
  export type OutputTuple = [witness: string, newCount: bigint];
  export interface OutputObject {
    witness: string;
    newCount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WitnessRemovedEvent {
  export type InputTuple = [witness: AddressLike, newCount: BigNumberish];
  export type OutputTuple = [witness: string, newCount: bigint];
  export interface OutputObject {
    witness: string;
    newCount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EmblemVaultCoreFacet extends BaseContract {
  connect(runner?: ContractRunner | null): EmblemVaultCoreFacet;
  waitForDeployment(): Promise<this>;

  interface: EmblemVaultCoreFacetInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addBypassRule: TypedContractMethod<
    [who: AddressLike, functionSig: BytesLike, id: BigNumberish],
    [void],
    "nonpayable"
  >;

  addWitness: TypedContractMethod<
    [_witness: AddressLike],
    [void],
    "nonpayable"
  >;

  getCoreVersion: TypedContractMethod<[], [string], "view">;

  getMetadataBaseUri: TypedContractMethod<[], [string], "view">;

  getRecipientAddress: TypedContractMethod<[], [string], "view">;

  getVaultFactory: TypedContractMethod<[], [string], "view">;

  getWitnessCount: TypedContractMethod<[], [bigint], "view">;

  isVaultLocked: TypedContractMethod<
    [collection: AddressLike, tokenId: BigNumberish],
    [boolean],
    "view"
  >;

  isWitness: TypedContractMethod<[_witness: AddressLike], [boolean], "view">;

  lockVault: TypedContractMethod<
    [collection: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  removeBypassRule: TypedContractMethod<
    [who: AddressLike, functionSig: BytesLike, id: BigNumberish],
    [void],
    "nonpayable"
  >;

  removeWitness: TypedContractMethod<
    [_witness: AddressLike],
    [void],
    "nonpayable"
  >;

  setMetadataBaseUri: TypedContractMethod<[_uri: string], [void], "nonpayable">;

  setRecipientAddress: TypedContractMethod<
    [_recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  setVaultFactory: TypedContractMethod<
    [_factory: AddressLike],
    [void],
    "nonpayable"
  >;

  toggleBypassability: TypedContractMethod<[], [void], "nonpayable">;

  unlockVault: TypedContractMethod<
    [collection: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addBypassRule"
  ): TypedContractMethod<
    [who: AddressLike, functionSig: BytesLike, id: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addWitness"
  ): TypedContractMethod<[_witness: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getCoreVersion"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getMetadataBaseUri"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getRecipientAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getVaultFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getWitnessCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isVaultLocked"
  ): TypedContractMethod<
    [collection: AddressLike, tokenId: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isWitness"
  ): TypedContractMethod<[_witness: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "lockVault"
  ): TypedContractMethod<
    [collection: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeBypassRule"
  ): TypedContractMethod<
    [who: AddressLike, functionSig: BytesLike, id: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeWitness"
  ): TypedContractMethod<[_witness: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMetadataBaseUri"
  ): TypedContractMethod<[_uri: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRecipientAddress"
  ): TypedContractMethod<[_recipient: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setVaultFactory"
  ): TypedContractMethod<[_factory: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "toggleBypassability"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unlockVault"
  ): TypedContractMethod<
    [collection: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "BypassRuleAdded"
  ): TypedContractEvent<
    BypassRuleAddedEvent.InputTuple,
    BypassRuleAddedEvent.OutputTuple,
    BypassRuleAddedEvent.OutputObject
  >;
  getEvent(
    key: "BypassRuleRemoved"
  ): TypedContractEvent<
    BypassRuleRemovedEvent.InputTuple,
    BypassRuleRemovedEvent.OutputTuple,
    BypassRuleRemovedEvent.OutputObject
  >;
  getEvent(
    key: "BypassabilityToggled"
  ): TypedContractEvent<
    BypassabilityToggledEvent.InputTuple,
    BypassabilityToggledEvent.OutputTuple,
    BypassabilityToggledEvent.OutputObject
  >;
  getEvent(
    key: "MetadataBaseUriChanged"
  ): TypedContractEvent<
    MetadataBaseUriChangedEvent.InputTuple,
    MetadataBaseUriChangedEvent.OutputTuple,
    MetadataBaseUriChangedEvent.OutputObject
  >;
  getEvent(
    key: "RecipientAddressChanged"
  ): TypedContractEvent<
    RecipientAddressChangedEvent.InputTuple,
    RecipientAddressChangedEvent.OutputTuple,
    RecipientAddressChangedEvent.OutputObject
  >;
  getEvent(
    key: "VaultFactorySet"
  ): TypedContractEvent<
    VaultFactorySetEvent.InputTuple,
    VaultFactorySetEvent.OutputTuple,
    VaultFactorySetEvent.OutputObject
  >;
  getEvent(
    key: "VaultLocked"
  ): TypedContractEvent<
    VaultLockedEvent.InputTuple,
    VaultLockedEvent.OutputTuple,
    VaultLockedEvent.OutputObject
  >;
  getEvent(
    key: "VaultUnlocked"
  ): TypedContractEvent<
    VaultUnlockedEvent.InputTuple,
    VaultUnlockedEvent.OutputTuple,
    VaultUnlockedEvent.OutputObject
  >;
  getEvent(
    key: "WitnessAdded"
  ): TypedContractEvent<
    WitnessAddedEvent.InputTuple,
    WitnessAddedEvent.OutputTuple,
    WitnessAddedEvent.OutputObject
  >;
  getEvent(
    key: "WitnessRemoved"
  ): TypedContractEvent<
    WitnessRemovedEvent.InputTuple,
    WitnessRemovedEvent.OutputTuple,
    WitnessRemovedEvent.OutputObject
  >;

  filters: {
    "BypassRuleAdded(address,bytes4,uint256)": TypedContractEvent<
      BypassRuleAddedEvent.InputTuple,
      BypassRuleAddedEvent.OutputTuple,
      BypassRuleAddedEvent.OutputObject
    >;
    BypassRuleAdded: TypedContractEvent<
      BypassRuleAddedEvent.InputTuple,
      BypassRuleAddedEvent.OutputTuple,
      BypassRuleAddedEvent.OutputObject
    >;

    "BypassRuleRemoved(address,bytes4,uint256)": TypedContractEvent<
      BypassRuleRemovedEvent.InputTuple,
      BypassRuleRemovedEvent.OutputTuple,
      BypassRuleRemovedEvent.OutputObject
    >;
    BypassRuleRemoved: TypedContractEvent<
      BypassRuleRemovedEvent.InputTuple,
      BypassRuleRemovedEvent.OutputTuple,
      BypassRuleRemovedEvent.OutputObject
    >;

    "BypassabilityToggled(bool)": TypedContractEvent<
      BypassabilityToggledEvent.InputTuple,
      BypassabilityToggledEvent.OutputTuple,
      BypassabilityToggledEvent.OutputObject
    >;
    BypassabilityToggled: TypedContractEvent<
      BypassabilityToggledEvent.InputTuple,
      BypassabilityToggledEvent.OutputTuple,
      BypassabilityToggledEvent.OutputObject
    >;

    "MetadataBaseUriChanged(string,string)": TypedContractEvent<
      MetadataBaseUriChangedEvent.InputTuple,
      MetadataBaseUriChangedEvent.OutputTuple,
      MetadataBaseUriChangedEvent.OutputObject
    >;
    MetadataBaseUriChanged: TypedContractEvent<
      MetadataBaseUriChangedEvent.InputTuple,
      MetadataBaseUriChangedEvent.OutputTuple,
      MetadataBaseUriChangedEvent.OutputObject
    >;

    "RecipientAddressChanged(address,address)": TypedContractEvent<
      RecipientAddressChangedEvent.InputTuple,
      RecipientAddressChangedEvent.OutputTuple,
      RecipientAddressChangedEvent.OutputObject
    >;
    RecipientAddressChanged: TypedContractEvent<
      RecipientAddressChangedEvent.InputTuple,
      RecipientAddressChangedEvent.OutputTuple,
      RecipientAddressChangedEvent.OutputObject
    >;

    "VaultFactorySet(address,address)": TypedContractEvent<
      VaultFactorySetEvent.InputTuple,
      VaultFactorySetEvent.OutputTuple,
      VaultFactorySetEvent.OutputObject
    >;
    VaultFactorySet: TypedContractEvent<
      VaultFactorySetEvent.InputTuple,
      VaultFactorySetEvent.OutputTuple,
      VaultFactorySetEvent.OutputObject
    >;

    "VaultLocked(address,uint256,address)": TypedContractEvent<
      VaultLockedEvent.InputTuple,
      VaultLockedEvent.OutputTuple,
      VaultLockedEvent.OutputObject
    >;
    VaultLocked: TypedContractEvent<
      VaultLockedEvent.InputTuple,
      VaultLockedEvent.OutputTuple,
      VaultLockedEvent.OutputObject
    >;

    "VaultUnlocked(address,uint256,address)": TypedContractEvent<
      VaultUnlockedEvent.InputTuple,
      VaultUnlockedEvent.OutputTuple,
      VaultUnlockedEvent.OutputObject
    >;
    VaultUnlocked: TypedContractEvent<
      VaultUnlockedEvent.InputTuple,
      VaultUnlockedEvent.OutputTuple,
      VaultUnlockedEvent.OutputObject
    >;

    "WitnessAdded(address,uint256)": TypedContractEvent<
      WitnessAddedEvent.InputTuple,
      WitnessAddedEvent.OutputTuple,
      WitnessAddedEvent.OutputObject
    >;
    WitnessAdded: TypedContractEvent<
      WitnessAddedEvent.InputTuple,
      WitnessAddedEvent.OutputTuple,
      WitnessAddedEvent.OutputObject
    >;

    "WitnessRemoved(address,uint256)": TypedContractEvent<
      WitnessRemovedEvent.InputTuple,
      WitnessRemovedEvent.OutputTuple,
      WitnessRemovedEvent.OutputObject
    >;
    WitnessRemoved: TypedContractEvent<
      WitnessRemovedEvent.InputTuple,
      WitnessRemovedEvent.OutputTuple,
      WitnessRemovedEvent.OutputObject
    >;
  };
}
