/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface EmblemVaultInitFacetInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getConfiguration"
      | "getInitVersion"
      | "getInitializationDetails"
      | "getInterfaceIds"
      | "initialize"
      | "isInitialized"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BypassStateInitialized"
      | "InterfaceIdSet"
      | "UnvaultingEnabled"
      | "VaultInitialized"
      | "WitnessInitialized"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getConfiguration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInitVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInitializationDetails",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInterfaceIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInitVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInitializationDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInterfaceIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
}

export namespace BypassStateInitializedEvent {
  export type InputTuple = [byPassable: boolean];
  export type OutputTuple = [byPassable: boolean];
  export interface OutputObject {
    byPassable: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InterfaceIdSetEvent {
  export type InputTuple = [interfaceId: BytesLike, name: string];
  export type OutputTuple = [interfaceId: string, name: string];
  export interface OutputObject {
    interfaceId: string;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnvaultingEnabledEvent {
  export type InputTuple = [enabled: boolean];
  export type OutputTuple = [enabled: boolean];
  export interface OutputObject {
    enabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VaultInitializedEvent {
  export type InputTuple = [
    owner: AddressLike,
    metadataBaseUri: string,
    byPassable: boolean,
    initialized: boolean
  ];
  export type OutputTuple = [
    owner: string,
    metadataBaseUri: string,
    byPassable: boolean,
    initialized: boolean
  ];
  export interface OutputObject {
    owner: string;
    metadataBaseUri: string;
    byPassable: boolean;
    initialized: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WitnessInitializedEvent {
  export type InputTuple = [witness: AddressLike, witnessCount: BigNumberish];
  export type OutputTuple = [witness: string, witnessCount: bigint];
  export interface OutputObject {
    witness: string;
    witnessCount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EmblemVaultInitFacet extends BaseContract {
  connect(runner?: ContractRunner | null): EmblemVaultInitFacet;
  waitForDeployment(): Promise<this>;

  interface: EmblemVaultInitFacetInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getConfiguration: TypedContractMethod<
    [],
    [
      [string, string, boolean, boolean, bigint] & {
        metadataBaseUri: string;
        recipientAddress: string;
        unvaultingEnabled: boolean;
        byPassable: boolean;
        witnessCount: bigint;
      }
    ],
    "view"
  >;

  getInitVersion: TypedContractMethod<[], [string], "view">;

  getInitializationDetails: TypedContractMethod<
    [],
    [
      [string, boolean, bigint] & {
        owner: string;
        initialized: boolean;
        witnessCount: bigint;
      }
    ],
    "view"
  >;

  getInterfaceIds: TypedContractMethod<
    [],
    [
      [string, string, string] & {
        erc1155: string;
        erc20: string;
        erc721a: string;
      }
    ],
    "view"
  >;

  initialize: TypedContractMethod<[_owner: AddressLike], [void], "nonpayable">;

  isInitialized: TypedContractMethod<[], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getConfiguration"
  ): TypedContractMethod<
    [],
    [
      [string, string, boolean, boolean, bigint] & {
        metadataBaseUri: string;
        recipientAddress: string;
        unvaultingEnabled: boolean;
        byPassable: boolean;
        witnessCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getInitVersion"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getInitializationDetails"
  ): TypedContractMethod<
    [],
    [
      [string, boolean, bigint] & {
        owner: string;
        initialized: boolean;
        witnessCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getInterfaceIds"
  ): TypedContractMethod<
    [],
    [
      [string, string, string] & {
        erc1155: string;
        erc20: string;
        erc721a: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[_owner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isInitialized"
  ): TypedContractMethod<[], [boolean], "view">;

  getEvent(
    key: "BypassStateInitialized"
  ): TypedContractEvent<
    BypassStateInitializedEvent.InputTuple,
    BypassStateInitializedEvent.OutputTuple,
    BypassStateInitializedEvent.OutputObject
  >;
  getEvent(
    key: "InterfaceIdSet"
  ): TypedContractEvent<
    InterfaceIdSetEvent.InputTuple,
    InterfaceIdSetEvent.OutputTuple,
    InterfaceIdSetEvent.OutputObject
  >;
  getEvent(
    key: "UnvaultingEnabled"
  ): TypedContractEvent<
    UnvaultingEnabledEvent.InputTuple,
    UnvaultingEnabledEvent.OutputTuple,
    UnvaultingEnabledEvent.OutputObject
  >;
  getEvent(
    key: "VaultInitialized"
  ): TypedContractEvent<
    VaultInitializedEvent.InputTuple,
    VaultInitializedEvent.OutputTuple,
    VaultInitializedEvent.OutputObject
  >;
  getEvent(
    key: "WitnessInitialized"
  ): TypedContractEvent<
    WitnessInitializedEvent.InputTuple,
    WitnessInitializedEvent.OutputTuple,
    WitnessInitializedEvent.OutputObject
  >;

  filters: {
    "BypassStateInitialized(bool)": TypedContractEvent<
      BypassStateInitializedEvent.InputTuple,
      BypassStateInitializedEvent.OutputTuple,
      BypassStateInitializedEvent.OutputObject
    >;
    BypassStateInitialized: TypedContractEvent<
      BypassStateInitializedEvent.InputTuple,
      BypassStateInitializedEvent.OutputTuple,
      BypassStateInitializedEvent.OutputObject
    >;

    "InterfaceIdSet(bytes4,string)": TypedContractEvent<
      InterfaceIdSetEvent.InputTuple,
      InterfaceIdSetEvent.OutputTuple,
      InterfaceIdSetEvent.OutputObject
    >;
    InterfaceIdSet: TypedContractEvent<
      InterfaceIdSetEvent.InputTuple,
      InterfaceIdSetEvent.OutputTuple,
      InterfaceIdSetEvent.OutputObject
    >;

    "UnvaultingEnabled(bool)": TypedContractEvent<
      UnvaultingEnabledEvent.InputTuple,
      UnvaultingEnabledEvent.OutputTuple,
      UnvaultingEnabledEvent.OutputObject
    >;
    UnvaultingEnabled: TypedContractEvent<
      UnvaultingEnabledEvent.InputTuple,
      UnvaultingEnabledEvent.OutputTuple,
      UnvaultingEnabledEvent.OutputObject
    >;

    "VaultInitialized(address,string,bool,bool)": TypedContractEvent<
      VaultInitializedEvent.InputTuple,
      VaultInitializedEvent.OutputTuple,
      VaultInitializedEvent.OutputObject
    >;
    VaultInitialized: TypedContractEvent<
      VaultInitializedEvent.InputTuple,
      VaultInitializedEvent.OutputTuple,
      VaultInitializedEvent.OutputObject
    >;

    "WitnessInitialized(address,uint256)": TypedContractEvent<
      WitnessInitializedEvent.InputTuple,
      WitnessInitializedEvent.OutputTuple,
      WitnessInitializedEvent.OutputObject
    >;
    WitnessInitialized: TypedContractEvent<
      WitnessInitializedEvent.InputTuple,
      WitnessInitializedEvent.OutputTuple,
      WitnessInitializedEvent.OutputObject
    >;
  };
}
